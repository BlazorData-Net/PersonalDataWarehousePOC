@using System.Text
@using CommunityToolkit.Maui.Storage
@inject NotificationService NotificationService
@inject DialogService DialogService

<div class="row">
    <div class="col">
        <button @onclick="()=> ExportLog()">
            Export Log
        </button>&nbsp;&nbsp;
        <button @onclick="()=> ClearLog()">
            Clear Log
        </button>&nbsp;&nbsp;
    </div>
</div>
<br />
<RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="true"
                PageSize="3" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@PersonalDataWarehouseLog" TItem="string" ColumnWidth="300px" ShowPagingSummary="true">
    <Columns>
        <RadzenDataGridColumn TItem="string" Title="Entry">
            <Template>
                <div style="height: 100px; overflow-y: auto; white-space: normal;">
                    @context
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    string PersonalDataWarehouseLogPath = "";
    string[] PersonalDataWarehouseLog;

    protected override void OnInitialized()
    {
        PersonalDataWarehouseLogPath =
        $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/PersonalDataWarehouseLog.csv";

        // Read the lines from the .csv file
        using (var file = new System.IO.StreamReader(PersonalDataWarehouseLogPath))
        {
            PersonalDataWarehouseLog = file.ReadToEnd().Split('\n');
            if (PersonalDataWarehouseLog[PersonalDataWarehouseLog.Length - 1].Trim() == "")
            {
                PersonalDataWarehouseLog = PersonalDataWarehouseLog.Take(PersonalDataWarehouseLog.Length - 1).ToArray();
            }
        }
    }

    private void ClearLog()
    {
        try
        {
            using (var streamWriter = new StreamWriter(PersonalDataWarehouseLogPath))
            {
                streamWriter.WriteLine(string.Join("\n", "Log cleared on " + DateTime.Now));
            }

            // Read the lines from the .csv file
            using (var file = new System.IO.StreamReader(PersonalDataWarehouseLogPath))
            {
                PersonalDataWarehouseLog = file.ReadToEnd().Split('\n');
                if (PersonalDataWarehouseLog[PersonalDataWarehouseLog.Length - 1].Trim() == "")
                {
                    PersonalDataWarehouseLog = PersonalDataWarehouseLog.Take(PersonalDataWarehouseLog.Length - 1).ToArray();
                }
            }

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Log Cleared",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task ExportLog()
    {
        try
        {
            // Read the lines from the .csv file
            using (var file = new System.IO.StreamReader(PersonalDataWarehouseLogPath))
            {
                PersonalDataWarehouseLog = file.ReadToEnd().Split('\n');
                if (PersonalDataWarehouseLog[PersonalDataWarehouseLog.Length - 1].Trim() == "")
                {
                    PersonalDataWarehouseLog = PersonalDataWarehouseLog.Take(PersonalDataWarehouseLog.Length - 1).ToArray();
                }

                string FinalLog = "<style> table { border-collapse: separate; border-spacing: 5px; } th, td { padding: 5px; } </style> <table><tr><th>Log Data</th></tr>";

                foreach(string line in PersonalDataWarehouseLog)
                {
                    FinalLog += "<tr><td>" + line + "</td></tr>";
                }

                FinalLog += "</table>";

                string FileName = $"PersonalDataWarehouseLog_{DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss")}.html";

                // Convert PersonalDataWarehouseLog to a MemoryStream but keep the line breaks
                using var stream = new MemoryStream(Encoding.Default.GetBytes(FinalLog));

                var fileSaverResult = await FileSaver.Default.SaveAsync(FileName, stream);

                if (fileSaverResult.IsSuccessful)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Saved",
                            Detail = $"The file was saved successfully to location: {fileSaverResult.FilePath}",
                            Duration = 4000
                        });
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"The file was not saved successfully with error: {fileSaverResult.Exception.Message}",
                            Duration = 4000
                        });
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}
