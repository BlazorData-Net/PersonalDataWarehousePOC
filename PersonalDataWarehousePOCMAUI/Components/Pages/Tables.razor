@page "/tables"
@using BlazorDatasheet
@using BlazorDatasheet.Core.Data
@using System.Data
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Menu
@using CommunityToolkit.Maui.Storage
@using CsvHelper
@using ExcelDataReader
@using Microsoft.Data.SqlClient
@using Parquet;
@using Parquet.Schema
@using PersonalDataWarehousePOC.Services
@using System.Text
@using System.Reflection
@using System.Globalization
@using PersonalDataWarehousePOCMAUI.Models
@using System.Text.RegularExpressions
@inject DataService DataService
@inject ConnectionSettingsService ConnectionSettings

<PageTitle>Tables</PageTitle>

<h4>Tables</h4>
<br />
<div>
    @if (TableList.Count > 0)
    {
        @if (CurrentTableName != "")
        {
            <br />

            <label>Select Table: </label>
            <select @onchange="@(async (args) =>
                    {
                        CurrentTableName = args.Value?.ToString();
                        await LoadTableData(CurrentTableName);
                    })">
                @foreach (var table in TableList)
                {
                    <option value="@table"
                            selected="@(table == CurrentTableName ? "selected" : null)">
                        @table
                    </option>
                }
            </select>
        }
    }
</div>
<br />
<div style="display: flex; align-items: center; flex-wrap: nowrap;">
    <button style="@(IsShowFileUpload ? "" : "display:none;")" @onclick="OpenShowConnectionDialog">
        Import Data
    </button>
    <span style="margin: 0 5px;"></span> <!-- Use margin instead of &nbsp; for spacing -->
    <InputFile @key="resetInputFileFlag"
               OnChange="HandleFileSelectedAsync"
               accept=".csv,.xls,.xlsx,.parquet"
               style="@UploadVisibility" />
    @if (IsFileSelected)
    {
        <label style="margin: 0 0px;">Selected File: @CurrentFileName</label>
        <button @onclick="ClearFileSeleted" style="margin-left: 10px;">
            Clear File
        </button>
    }
</div>
@if (IsLoadingSheet)
{
    <br />

    <div role="progressbar" class="marquee" style="width: 25%"></div>
}
else
{
    <div>
        @if (CurrentDataTable.Rows.Count > 0)
        {
            <br />
            <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
                <button @onclick="Save" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">save</i>
                </button>
                <button @onclick="() => sheet.Commands.Undo()" title="Undo" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">undo</i>
                </button>
                <button @onclick="() => sheet.Commands.Redo()" title="Redo" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">redo</i>
                </button>
                <button @onclick="InsertRowAfterSelection" title="Insert Row" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">add</i>
                </button>
                <button @onclick="RemoveRow" title="Delete Row" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">remove</i>
                </button>
                <button @onclick="Export" title="Export" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">file_download</i>
                </button>
                @if (CurrentTableName != "")
                {
                    <button @onclick="DeleteConfirmation" title="Delete" style="background:none;border:none;">
                        <i class="material-icons" style="color:black;">delete</i>
                    </button>
                }
            </div>
        }
    </div>
    <div style="@((CurrentDataTable.Rows.Count > 0) ? "" : "display:none;")">
        <Datasheet Sheet="@sheet" MenuOptions=_sheetMenuOpt />
    </div>
}

<!-- POPUPS -->
@if (ShowConnectionDialog)
{
    <DatabaseConnectionDialog ConnectionType="@ConnectionType"
                              DatabaseName="@DatabaseName"
                              DatabasePassword="@DatabasePassword"
                              DatabaseUsername="@DatabaseUsername"
                              ServerName="@ServerName"
                              Close="CloseShowConnectionDialog"
                              IntegratedSecurityDisplay="@IntegratedSecurityDisplay"
                              OnSetConnection="SetDatabaseConnection" />
}

@if (IsNewTablePopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">New Table</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseNewTablePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <form @onsubmit="SaveParquetAsync">
                            <div>
                                <label for="tableName">Table Name:</label>
                                <input type="text" id="tableName" maxlength="50" style="width: 300px;" @bind="CurrentTableName" />
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <button type="submit">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (IsExportVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Export</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseExportPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space" style="text-align: center;">

                        <div role="progressbar" class="marquee" style="width: 100%; display: @(IsLoadingSheet ? "block" : "none");"></div>

                        <div style="display: @(IsLoadingSheet ? "none" : "block");">
                            <span>&nbsp; &nbsp;</span>
                            <button @onclick="ExportExcel">Excel</button>
                            <span>&nbsp; &nbsp;</span>
                            <button @onclick="ExportParquet">Parquet</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (Message != "")
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Alert!</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseMessagePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 100%; height: 100px; overflow: auto">
                            @Message
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowDeleteConfirmation)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Confirm Delete</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseDeleteConfirmationPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space" style="text-align: center;">

                        <span>&nbsp; &nbsp;</span>
                        <button @onclick="Delete">Yes</button>
                        <span>&nbsp; &nbsp;</span>
                        <button @onclick="CloseDeleteConfirmationPopup">No</button>

                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private Sheet sheet;

    private DataSet dataSet;
    private IBrowserFile CurrentFile;

    List<string> TableList = new List<string>();
    Dictionary<string, string> TableColumns = new Dictionary<string, string>();
    List<string> colGeneralErrors = new List<string>();
    DataTable CurrentDataTable = new DataTable();
    string CurrentTableName = string.Empty;
    string CurrentFileName = string.Empty;

    string Message = "";

    bool resetInputFileFlag = false;
    bool IsFileSelected = false;
    bool IsShowFileUpload = true;
    bool IsLoadingSheet = false;
    bool IsNewTablePopupVisible = false;
    bool IsExportVisible = false;

    bool ShowDeleteConfirmation = false;
    bool ShowConnectionDialog { get; set; } = false;
    bool isLoading { get; set; } = false;
    bool isReadyForImport { get; set; } = false;

    private string DatabaseConnectionString = "";
    private string FabricConnectionString = "";
    private string AzureStorageConnectionString = "";
    private string DatabaseConnectionStringStatusMessage = "Not Set";
    private string FabricConnectionStringStatusMessage = "Not Set";
    private string AzureStorageConnectionStringStatusMessage = "Not Set";

    private string ConnectionType = "SQL Server";
    private string ServerName = "localhost";
    private string DatabaseName = "AdventureWorks";
    private string DatabasePassword = "";
    private string DatabaseUsername = "";
    private string IntegratedSecurityDisplay = "False";

    string UploadVisibility => IsShowFileUpload ? "display:block;" : "display:none;";

    SheetMenuOptions _sheetMenuOpt = new SheetMenuOptions()
        {
            InsertColsEnabled = true,
            HideColsEnabled = false,
            HideRowsEnabled = false,
            DeleteColsEnabled = true,
            MergeEnabled = false,
            SortRangeEnabled = false,
            FilterColumnEnabled = false,
            HeaderMenuEnabled = false,
            AlignmentEnabled = true,
            ClearEnabled = false
        };

    protected override async Task OnInitializedAsync()
    {
        await ResetPage();
    }

    // Events

    private async Task ResetPage()
    {
        // Toggle the flag to force a re-render of InputFile
        resetInputFileFlag = !resetInputFileFlag;

        CurrentTableName = string.Empty;
        CurrentFileName = string.Empty;
        IsFileSelected = false;
        IsShowFileUpload = true;
        IsLoadingSheet = false;
        IsNewTablePopupVisible = false;
        Message = "";
        LoadTableListDropdown();

        // Initialize the sheet
        sheet = new Sheet(10, 10);

        LoadTableListDropdown();

        // If TableList has items, load the first table
        if (TableList.Count > 0)
        {
            CurrentTableName = TableList[0];
            await LoadTableData(CurrentTableName);
        }
    }

    private async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            return;
        }

        CurrentTableName = string.Empty;
        CurrentFile = e.File;
        CurrentFileName = CurrentFile.Name;

        IsShowFileUpload = false;
        IsLoadingSheet = true;
        StateHasChanged();

        // Increase the max allowed size to a value larger than your file size
        using var fileStream = CurrentFile.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024); // 50 MB

        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        // If the file is an Excel file, load the data into a DataTable
        if (CurrentFileName.EndsWith(".xls") || CurrentFileName.EndsWith(".xlsx"))
        {
            using var reader = ExcelReaderFactory.CreateReader(memoryStream);
            var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = _ => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });

            dataSet = result;
        }

        // If the file is a Parquet file, load the data into a DataTable
        if (CurrentFileName.EndsWith(".parquet"))
        {
            var Table = await ParquetReader.ReadTableFromStreamAsync(memoryStream);

            dataSet = await DataService.ConvertParquetTableToDataSetAsync(Table, CurrentFileName);
        }

        // If the file is a CSV file, load the data into a DataTable
        if (CurrentFileName.EndsWith(".csv"))
        {
            using var reader = new StreamReader(memoryStream);
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                // Do any configuration to `CsvReader` before creating CsvDataReader.
                using (var dr = new CsvDataReader(csv))
                {
                    dataSet = new DataSet();
                    dataSet.Tables.Add("Sheet1");
                    dataSet.Tables[0].Load(dr);
                }
            }
        }

        // Load dataSet into DataTable
        if (dataSet != null && dataSet.Tables.Count > 0)
        {
            CurrentDataTable = dataSet.Tables[0];
            await LoadTableData();
        }

        CurrentFile = null;
        IsLoadingSheet = false;
        IsFileSelected = true;
        StateHasChanged();
    }

    private async Task ClearFileSeleted()
    {
        await ResetPage();
    }

    // Table Dropdown

    private void LoadTableListDropdown()
    {
        TableList = new List<string>();

        // Load the TableList data
        String parquetFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Parquet";

        if (Directory.Exists(parquetFolder))
        {
            TableList = Directory.GetFiles(parquetFolder, "*.parquet")
                                 .Select(Path.GetFileNameWithoutExtension)
                                 .ToList();
        }
    }

    private async Task LoadTableData(string paramTable)
    {
        IsLoadingSheet = true;
        StateHasChanged();

        // Load the DataTable
        String parquetFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Parquet";
        var fileName = Path.Combine(parquetFolder, $"{paramTable}.parquet");

        if (System.IO.File.Exists(fileName))
        {
            CurrentDataTable = await DataService.ReadParquetFileAsync(fileName);
            await LoadTableData();
        }
        else
        {
            Message = "Table not found.";
        }

        IsLoadingSheet = false;
        StateHasChanged();
    }

    private async Task LoadTableData()
    {
        Message = "";

        // Get a list of the columns from the DataTable
        TableColumns = CurrentDataTable.Columns
        .Cast<DataColumn>()
        .ToDictionary(
            column => column.ColumnName,
            column => column.DataType.Name
        );

        // Create sheet with the number of columns
        sheet = new Sheet(CurrentDataTable.Rows.Count, TableColumns.Count);

        // Wait 1 second before loading the table data
        // to join the UI thread
        await Task.Delay(1000);

        // Turn off history
        sheet.BatchUpdates();
        sheet.Commands.PauseHistory();

        int i = 0;
        foreach (string objDatabaseColumn in TableColumns.Keys)
        {
            sheet.Columns.SetHeadings(i, i, objDatabaseColumn);
            i++;
        }

        int ii = 0;
        foreach (DataRow dataRow in CurrentDataTable.Rows)
        {
            i = 0;
            foreach (var objDatabaseColumn in TableColumns)
            {
                // Set the value of the cell
                sheet.Cells[ii, i].Value = dataRow[i].ToString();
                sheet.Cells[ii, i].Format = new CellFormat() { IsReadOnly = false };
                sheet.Cells[ii, i].Type = objDatabaseColumn.Value;
                i++;
            }

            ii++;
        }

        // Turn on history
        sheet.EndBatchUpdates();
        sheet.Commands.ResumeHistory();
    }

    #region Datasheet Events
    private void InsertRowAfterSelection()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.InsertAt(sheet.Selection.ActiveRegion.TopLeft.row);
    }

    private void RemoveRow()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.RemoveAt(sheet.Selection.ActiveRegion.Top);
    }
    #endregion

    // Save

    private async Task Save()
    {
        if (CurrentTableName.Trim().Length == 0)
        {
            // Open the New Table popup
            IsNewTablePopupVisible = true;
        }
        else
        {
            // Toggle the flag to force a re-render of InputFile
            resetInputFileFlag = !resetInputFileFlag;

            // Reset the variables
            IsFileSelected = false;
            IsShowFileUpload = true;

            // Save the Parquet file
            await SaveParquetAsync();
        }
    }

    private async Task SaveParquetAsync()
    {
        // Only run these checks on a new Table
        if (IsNewTablePopupVisible == true)
        {
            if (CurrentTableName.Trim().Length == 0)
            {
                Message = "Table Name is required.";
                return;
            }

            if (DetectDuplicate(CurrentTableName))
            {
                Message = "Table Name already exists.";
                return;
            }
        }

        CurrentTableName = CleanAndCapitalize(CurrentTableName);

        IsLoadingSheet = true;
        StateHasChanged();

        // Convert sheet to datatable
        ConvertSheetToDataTable();

        // Convert to Parquet
        DataService objDataService = new DataService();
        await objDataService.WriteDataTableToParquetAsync(CurrentDataTable, CurrentTableName);

        // Create C# class from DataTable
        GenerateClassFromDataTable(CurrentDataTable, CurrentTableName);

        // Re-Load the TableList dropdown
        LoadTableListDropdown();

        // Toggle the flag to force a re-render of InputFile
        // Clearing it if needed
        resetInputFileFlag = !resetInputFileFlag;

        IsLoadingSheet = false;
        IsNewTablePopupVisible = false;
        StateHasChanged();

        Message = $"{CurrentTableName} saved successfully.";
    }

    // Delete

    private async Task Delete()
    {
        ShowDeleteConfirmation = false;

        if (CurrentTableName.Trim().Length == 0)
        {
            Message = "Must save table first.";
        }
        else
        {
            // Delete the Parquet file
            IsLoadingSheet = true;
            StateHasChanged();

            // Delete the Parquet file
            String parquetFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Parquet";
            var fileName = Path.Combine(parquetFolder, $"{CurrentTableName}.parquet");
            if (System.IO.File.Exists(fileName))
            {
                System.IO.File.Delete(fileName);
            }

            // Delete the C# class file
            String ClassesFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Classes";
            fileName = Path.Combine(ClassesFolder, $"{CurrentTableName}.cs");
            if (System.IO.File.Exists(fileName))
            {
                System.IO.File.Delete(fileName);
            }

            // Delete the XSD file
            String ReportsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Reports/Data";
            fileName = Path.Combine(ReportsFolder, $"{CurrentTableName}Schemas.xsd");
            if (System.IO.File.Exists(fileName))
            {
                System.IO.File.Delete(fileName);
            }

            string deletedTableName = CurrentTableName;
            CurrentTableName = string.Empty;

            Message = $"{deletedTableName} deleted!";

            await ResetPage();
        }
    }

    // Popups

    private void CloseNewTablePopup()
    {
        IsNewTablePopupVisible = false;
    }

    private void CloseMessagePopup()
    {
        Message = "";
    }

    private void DeleteConfirmation()
    {
        ShowDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmationPopup()
    {
        ShowDeleteConfirmation = false;
    }

    // Datasheet Operations

    #region private void ConvertSheetToDataTable
    private void ConvertSheetToDataTable()
    {
        colGeneralErrors = new List<string>();
        CurrentDataTable = new DataTable();

        foreach (var column in TableColumns)
        {
            string columnName = column.Key;
            Type columnType = GetColumnType(column.Value);

            CurrentDataTable.Columns.Add(new DataColumn(columnName, columnType));
        }

        for (int i = 0; i < sheet.NumRows; i++)
        {
            DataRow row = CurrentDataTable.NewRow();

            for (int j = 0; j < TableColumns.Count; j++)
            {
                try
                {
                    var cellValue = sheet.Cells[i, j]?.Value;

                    if (cellValue == null
                        || cellValue == DBNull.Value
                        || string.IsNullOrWhiteSpace(cellValue.ToString()))
                    {
                        row[j] = DBNull.Value;
                    }
                    else
                    {
                        var columnType = CurrentDataTable.Columns[j].DataType;

                        if (columnType == typeof(int))
                        {
                            row[j] = Convert.ToInt32(cellValue);
                        }
                        else if (columnType == typeof(DateTime))
                        {
                            row[j] = Convert.ToDateTime(cellValue);
                        }
                        else if (columnType == typeof(TimeSpan))
                        {
                            string stringValue = cellValue.ToString();

                            if (DateTime.TryParse(stringValue, out var parsedDateTime))
                            {
                                row[j] = parsedDateTime.TimeOfDay;
                            }
                            else if (TimeSpan.TryParse(stringValue, out var parsedTimeSpan))
                            {
                                row[j] = parsedTimeSpan;
                            }
                            else
                            {
                                row[j] = stringValue;
                            }
                        }
                        else
                        {
                            string cleanValue = cellValue.ToString()
                                .Replace("\r\n", " ")
                                .Replace("\t", " ")
                                .Replace("\r", " ")
                                .Replace("\n", " ")
                                .Trim();

                            row[j] = cleanValue;
                        }
                    }
                }
                catch (Exception ex)
                {
                    colGeneralErrors.Add(ex.GetBaseException().Message);
                }
            }

            CurrentDataTable.Rows.Add(row);
        }
    }
    #endregion

    #region public static void GenerateClassFromDataTable(DataTable dt, string className)
    public static void GenerateClassFromDataTable(DataTable dt, string className)
    {
        // ** Build the class definition and dictionary mapping

        // Build the class definition
        StringBuilder ClassDefinition = new StringBuilder();
        ClassDefinition.AppendLine($"public class {DataService.FirstCharToUpper(className)}");
        ClassDefinition.AppendLine("    {");

        // Add an Id property to the class
        ClassDefinition.AppendLine("        public int Id { get; set; }");

        // For each column in the DataTable, create a string property
        foreach (DataColumn column in dt.Columns)
        {
            // Ensure the property name is a valid C# identifier
            string propertyName = column.ColumnName.Replace(" ", "_");

            ClassDefinition.AppendLine
            ($"        public string {propertyName} {{ get; set; }}");
        }

        ClassDefinition.AppendLine("    }");

        // Build the dictionaryMapping
        StringBuilder DictionaryMapping = new StringBuilder();

        foreach (DataColumn column in dt.Columns)
        {
            // Replace spaces in the column name with underscores to make it a valid C# identifier
            string propertyName = column.ColumnName.Replace(" ", "_");

            // Build the line:
            DictionaryMapping.AppendLine(
                $"                        {propertyName} = dict.ContainsKey(\"{propertyName}\") "
                + "? dict[\"{propertyName}\"]?.ToString() : null,");
        }

        // ** Open the Class.txt template from Templates\Class.txt and replace the content with the codeBuilder
        string templatePath = Path.Combine("Templates", "Class.txt");

        // Read the content of the template file
        string templateContent = File.ReadAllText(templatePath);

        // Replace the placeholders
        string codeBuilder = "";

        codeBuilder = templateContent.Replace("**CLASS NAME**", DataService.FirstCharToUpper(className));
        codeBuilder = codeBuilder.Replace("**CLASS DEFINITION**", ClassDefinition.ToString());
        codeBuilder = codeBuilder.Replace("**DICTIONARY MAPPING**", DictionaryMapping.ToString());
        codeBuilder = codeBuilder.Replace("**CLASS UPPERCASE WITH AN S**", (DataService.FirstCharToUpper(className) + "s"));
        codeBuilder = codeBuilder.Replace("**CLASS LOWERCASE WITH AN S**", (className.ToLower() + "s"));
        codeBuilder = codeBuilder.Replace("**FIRST FIELD**", dt.Columns[0].ColumnName);

        // ** Write the class to a file

        // Define directory for output
        String ClassesPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Classes";

        // Set the file path
        string filePath = Path.Combine(ClassesPath, className + ".cs");

        // Write the class to file
        File.WriteAllText(filePath, codeBuilder.ToString());

        // **********************
        // ** Create the xsd file
        // **********************

        // Load the class and generate the schema
        // Load the class by using its name and get its type

        // Load the class using the contents in codeBuilder.ToString() and get its type
        var ClassType = XsdGenerator.GetTypeFromCode(codeBuilder.ToString(), DataService.FirstCharToUpper(className));

        // Step 1: Generate the schema string
        string schemaString = XsdGenerator.GenerateSchemaForType(ClassType);

        // Step 2: Save the file
        String ReportsDataPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Reports/Data";

        filePath = Path.Combine(ReportsDataPath, $"{className}Schemas.xsd");
        File.WriteAllText(filePath, schemaString);
    }
    #endregion

    // Export

    private void Export()
    {
        IsExportVisible = true;
    }

    private void CloseExportPopup()
    {
        IsExportVisible = false;
    }

    private async Task ExportExcel()
    {
        IsLoadingSheet = true;

        // Export the DataTable to Excel
        byte[] ExcelContents = await DataService.ExportDataTableToExcelAsync(CurrentDataTable, CurrentTableName);

        // Read DocumentContents into a MemoryStream
        var stream = new MemoryStream(ExcelContents);

        var fileSaverResult = await FileSaver.Default.SaveAsync($"{CurrentTableName}.xlsx", stream);

        if (fileSaverResult != null)
        {
            if (!fileSaverResult.IsSuccessful)
            {
                Message = fileSaverResult.Exception.Message;
            }
        }

        IsLoadingSheet = false;
        IsExportVisible = false;
    }

    private async Task ExportParquet()
    {
        IsLoadingSheet = true;

        // Export the DataTable to Parquet
        byte[] ParquetContents = await DataService.ExportDataTableToParquetAsync(CurrentDataTable, CurrentTableName);

        // Read DocumentContents into a MemoryStream
        var stream = new MemoryStream(ParquetContents);

        var fileSaverResult = await FileSaver.Default.SaveAsync($"{CurrentTableName}.parquet", stream);

        IsLoadingSheet = false;
        StateHasChanged();

        if (fileSaverResult != null)
        {
            if (!fileSaverResult.IsSuccessful)
            {
                Message = fileSaverResult.Exception.Message;
            }
        }

        IsLoadingSheet = false;
        IsExportVisible = false;
    }

    // ********************************************************************************************************************
    // Database Connection
    // ********************************************************************************************************************

    #region private void OpenShowConnectionDialog()
    private void OpenShowConnectionDialog()
    {
        ShowConnectionDialog = true;
    }
    #endregion

    #region private void CloseShowConnectionDialog()
    private void CloseShowConnectionDialog()
    {
        ShowConnectionDialog = false;
    }
    #endregion

    #region private async Task SetDatabaseConnection(DatabaseImport objDatabaseImport)
    private async Task SetDatabaseConnection(DatabaseImport objDatabaseImport)
    {
        // Update the connection settings
        ConnectionType = objDatabaseImport.ConnectionSetting.ConnectionType;
        ServerName = objDatabaseImport.ConnectionSetting.ServerName;
        DatabaseName = objDatabaseImport.ConnectionSetting.DatabaseName;
        DatabasePassword = objDatabaseImport.ConnectionSetting.Password;
        DatabaseUsername = objDatabaseImport.ConnectionSetting.Username;
        IntegratedSecurityDisplay = (objDatabaseImport.ConnectionSetting.IntegratedSecurity) ? "True" : "False";

        ShowConnectionDialog = false;
        IsShowFileUpload = false;
        IsLoadingSheet = true;
        StateHasChanged();

        using (SqlConnection connection = new SqlConnection(objDatabaseImport.ConnectionSetting.ConnectionString))
        {
            connection.Open();

            // Get the computed columns for the table
            List<string> ComputedColumns = GetComputedColumns(connection, objDatabaseImport.TableName);

            // Get a list of the column names
            var TableColumns = new List<DTODatabaseColumn>();

            DataTable Columns = connection.GetSchema("Columns");

            foreach (DataRow row in Columns.Rows)
            {
                if ($"[{row["TABLE_SCHEMA"].ToString()}].[{row["TABLE_NAME"].ToString()}]" == objDatabaseImport.TableName)
                {
                    DTODatabaseColumn objTableColumns = new DTODatabaseColumn();

                    objTableColumns.ColumnName = row["COLUMN_NAME"].ToString();
                    objTableColumns.ColumnType = row["DATA_TYPE"].ToString();

                    if (row["CHARACTER_MAXIMUM_LENGTH"] != DBNull.Value)
                    {
                        objTableColumns.ColumnLength = Convert.ToInt32(row["CHARACTER_MAXIMUM_LENGTH"]);
                    }
                    else
                    {
                        objTableColumns.ColumnLength = 0;
                    }

                    TableColumns.Add(objTableColumns);
                }
            }

            // Remove from TableColumns any colums types of unique identifiers
            TableColumns = TableColumns.Where(x => x.ColumnType != "uniqueidentifier").ToList();

            // Remove from TableColumns any colums types of hierarchyid
            TableColumns = TableColumns.Where(x => x.ColumnType != "hierarchyid").ToList();

            // Remove from TableColumns any colums types of varbinary
            TableColumns = TableColumns.Where(x => x.ColumnType != "varbinary").ToList();

            // Remove from TableColumns any colums types of geography
            TableColumns = TableColumns.Where(x => x.ColumnType != "geography").ToList();

            // Remove from TableColumns any colums types of computed
            // remove colums conatined in the ComputedColumns list
            TableColumns = TableColumns.Where(x => !ComputedColumns.Contains(x.ColumnName)).ToList();

            // Get Table names from TableColumns as comma seperated values
            string strTableNames = string.Join(",", TableColumns.Select(x => $"[{x.ColumnName}]").ToArray());

            string sql = $"SELECT {strTableNames} FROM {objDatabaseImport.TableName}";

            SqlDataAdapter adapter = new SqlDataAdapter(sql, connection);
            CurrentDataTable = new DataTable();
            adapter.Fill(CurrentDataTable);

            connection.Close();
        }

        await LoadTableData();

        IsLoadingSheet = false;
        IsShowFileUpload = true;
        StateHasChanged();
    }
    #endregion

    // Utility

    #region public static string CleanAndCapitalize(string input)
    public static string CleanAndCapitalize(string input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        // Keep only letters, digits, and spaces (temporarily),
        // removing all other characters
        // We keep spaces initially to determine word boundaries
        // for capitalization.
        char[] filteredChars = input
            .Where(c => char.IsLetterOrDigit(c) || char.IsWhiteSpace(c))
            .ToArray();

        // Convert to a string to process spaces and capitalization
        string intermediate = new string(filteredChars);

        // Remove spaces and capitalize the following character
        // if it is a letter
        // We'll build the result using a StringBuilder for efficiency.
        var result = new System.Text.StringBuilder();
        bool capitalizeNext = false;

        for (int i = 0; i < intermediate.Length; i++)
        {
            char c = intermediate[i];

            if (char.IsWhiteSpace(c))
            {
                // Encountered a space: the next valid letter
                // should be capitalized if it's not a digit.
                capitalizeNext = true;
            }
            else
            {
                // This character is alphanumeric. If we are
                // instructed to capitalize it and it's a letter:
                if (capitalizeNext && char.IsLetter(c))
                {
                    c = char.ToUpper(c);
                }

                result.Append(c);

                // Reset flag after processing a non-space character
                capitalizeNext = false;
            }
        }

        return result.ToString();
    }
    #endregion

    #region public static bool DetectDuplicate(string paramTableName)
    public static bool DetectDuplicate(string paramTableName)
    {
        bool result = false;

        // Check if the table name already exists
        String folderPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Parquet";

        string fileName = $"{folderPath}/{paramTableName}.parquet";
        var ParquetExists = System.IO.File.Exists(fileName);

        String ViewsFolderPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Views";

        fileName = $"{ViewsFolderPath}/{paramTableName}.view";
        var ViewExists = System.IO.File.Exists(fileName);

        if (ParquetExists || ViewExists)
        {
            result = true;
        }

        return result;
    }
    #endregion

    #region private static string CleanValue(string value)
    private static string CleanValue(string value)
    {
        return string.IsNullOrEmpty(value)
            ? ""
            : Regex.Replace(value, @"[\r\n\t]", " ").Trim();
    }
    #endregion

    // ********************************************************************************************************************
    // Utility
    // ********************************************************************************************************************

    #region public List<string> GetPrimaryKey(SqlConnection connection, string tableName)
    public List<string> GetPrimaryKey(SqlConnection connection, string tableName)
    {
        List<string> PrimaryKeys = new List<string>();

        try
        {
            string query = $@"
                SELECT c.Name
                FROM sys.index_columns ic
                INNER JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
                INNER JOIN sys.indexes i ON i.object_id = ic.object_id AND i.index_id = ic.index_id
                WHERE i.is_primary_key = 1 AND ic.object_id = OBJECT_ID('{tableName}')";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if (reader["Name"] != DBNull.Value)
                        {
                            PrimaryKeys.Add(reader["Name"].ToString());
                        }
                    }
                }
            }
        }
        catch { }

        return PrimaryKeys;
    }
    #endregion

    #region public List<string> GetComputedColumns(SqlConnection connection, string tableName)
    public List<string> GetComputedColumns(SqlConnection connection, string tableName)
    {
        List<string> ComputedColumns = new List<string>();

        try
        {
            string query = $@"
                                SELECT name AS ColumnName
                                FROM sys.columns
                                WHERE object_id = OBJECT_ID('{tableName}') AND is_computed = 1";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        if (reader["ColumnName"] != DBNull.Value)
                        {
                            ComputedColumns.Add(reader["ColumnName"].ToString());
                        }
                    }
                }
            }
        }
        catch { }

        return ComputedColumns;
    }
    #endregion

    #region public List<string> GetIdentityColumns(SqlConnection connection, string tableName)
    public List<string> GetIdentityColumns(SqlConnection connection, string tableName)
    {
        List<string> identityColumns = new List<string>();

        string strTableNameCleaned = StripTableSchemaAndBrackets(tableName);

        try
        {
            string query = $@"
            SELECT COLUMN_NAME
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE TABLE_NAME like '%{strTableNameCleaned}%'
              AND COLUMNPROPERTY(OBJECT_ID(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if (reader["COLUMN_NAME"] != DBNull.Value)
                        {
                            identityColumns.Add(reader["COLUMN_NAME"].ToString());
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception (optional logging or rethrowing)
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            if (connection.State == ConnectionState.Open)
            {
                connection.Close();
            }
        }

        return identityColumns;
    }
    #endregion

    #region public System.Type GetColumnType(string paramType)
    public System.Type GetColumnType(string paramType)
    {
        Type ReturnType = typeof(string);

        if (paramType.Contains("int"))
        {
            return typeof(int);
        }

        if (paramType.StartsWith("time"))
        {
            return typeof(TimeSpan);
        }

        if (paramType.Contains("char"))
        {
            return typeof(string);
        }

        if (paramType.Contains("date"))
        {
            return typeof(DateTime);
        }

        return ReturnType;
    }
    #endregion

    #region static string StripTableSchemaAndBrackets(string input)
    static string StripTableSchemaAndBrackets(string input)
    {
        // Remove the square brackets
        input = input.Replace("[", "").Replace("]", "");

        // Find the position of the dot
        int dotIndex = input.IndexOf('.');

        // Extract the substring after the dot
        if (dotIndex >= 0 && dotIndex < input.Length - 1)
        {
            input = input.Substring(dotIndex + 1);
        }

        return input;
    }
    #endregion

    #region private object GetCellValue(object columnValue, string columnType)
    private object GetCellValue(object columnValue, string columnType)
    {
        try
        {
            if (columnType.Contains("int"))
            {
                if (columnValue == DBNull.Value)
                {
                    return DBNull.Value;
                }
                else
                {
                    return Convert.ToInt32(columnValue);
                }
            }

            if (columnType.Contains("char"))
            {
                if (columnValue == DBNull.Value)
                {
                    return DBNull.Value;
                }
                else
                {
                    return columnValue.ToString();
                }
            }

            if (columnType.StartsWith("time"))
            {
                if (columnValue == DBNull.Value)
                {
                    return DBNull.Value;
                }
                else
                {
                    return TimeSpan.Parse(columnValue.ToString());
                }
            }

            if (columnType.Contains("date"))
            {
                if (columnValue == DBNull.Value)
                {
                    return DBNull.Value;
                }
                else
                {
                    return Convert.ToDateTime(columnValue);
                }
            }
        }
        catch
        {
            return columnValue;
        }

        return columnValue;
    }
    #endregion

    #region private SqlDbType GetSQLParameterType(string columnType)
    private SqlDbType GetSQLParameterType(string columnType)
    {
        SqlDbType sqlDbType = SqlDbType.NVarChar;

        if (columnType.Contains("int"))
        {
            sqlDbType = SqlDbType.Int;
        }

        if (columnType.Contains("char"))
        {
            sqlDbType = SqlDbType.NVarChar;
        }

        if (columnType.Contains("time"))
        {
            sqlDbType = SqlDbType.Time;
        }

        if (columnType.Contains("date"))
        {
            sqlDbType = SqlDbType.DateTime;
        }

        return sqlDbType;
    }
    #endregion

    #region private int GetHighestId()
    private int GetHighestId()
    {
        int maxId = 0;

        try
        {
            // Get all values of the _Id column in CurrentDataTable
            var Ids = CurrentDataTable.AsEnumerable()
                .Select(row => row.Field<object>("_Id"))
                .ToList();

            // Convert Ids from a list of strings to a list of integers
            var IdsInt = Ids.Select(x => Convert.ToInt32(x)).ToList();

            // Find the maximum value of IdsInt
            maxId = IdsInt.Max();
        }
        catch
        {
            maxId = 0;
        }

        return maxId;
    }
    #endregion
}