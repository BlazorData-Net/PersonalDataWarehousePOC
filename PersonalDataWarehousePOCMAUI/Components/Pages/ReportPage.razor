@page "/reports"
@using System.Text.Json
@using System.Linq.Dynamic.Core
@using CSScriptLib
@using System.Reflection
@using Microsoft.Reporting.NETCore
@using PersonalDataWarehousePOC.Services
@using System.Dynamic
@using System.Data
@using PersonalDataWarehousePOCMAUI.Services
@inject IJSRuntime jsRuntime
@inject DatabaseService databaseService
@inject DataService DataService
@inject SettingsService SettingsService

<PageTitle>Reports</PageTitle>

<h4>Reports</h4>
<br />

<div>
    @if (ReportList.Count > 0)
    {
        <label>Select Report: </label>
        <select @onchange="@(async (args) =>
                    {
                        CurrentReportName = args.Value?.ToString();
                        LoadReport(CurrentReportName);
                    })">
            @foreach (var Report in ReportList)
            {
                <option value="@Report"
                        selected="@(Report == CurrentReportName ? "selected" : null)">
                    @Report
                </option>
            }
        </select>
    }
</div>
<br />

<div>
    <div>
        <div class="rz-p-sm-1" style="background-color:whitesmoke; border-block:thin; border-block-color:lightgray; text-align:left">

            <button @onclick="OpenWizard" title="Report Wizard" style="background:none;border:none;">
                <i class="material-icons" style="color:black;">flash_on</i>
            </button>

            @if (ReportList.Count > 0)
            {
                <button @onclick="Execute" title="Execute" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">play_arrow</i>
                </button>

                <button @onclick="DeleteConfirmation" title="Delete" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">delete</i>
                </button>

                <button title="Export" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">file_download</i>
                </button>

                <button title="AI" style="background:none;border:none;">
                    <i class="material-icons" style="color:black;">psychology</i>
                </button>

                @if (ContentChanged)
                {
                    <span style="color:red">&nbsp;&nbsp;<b>Editing...</b></span>
                }
            }
        </div>
    </div>

    <br />
    <br />
</div>

<br />
<!-- POPUPS -->
@if (IsNewOutputPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog" style="max-width: 60%; margin-top: 5%;">
            <div class="modal-content">
                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">View Report</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseOutputReportPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space" style="text-align: center;">
                        <div role="progressbar" class="marquee" style="width: 100%; display: @(IsLoading ? "block" : "none");"></div>

                        <div style="display: @(IsLoading ? "none" : "block");">
                            Page: <span>@CurrentPage</span> / <span id="page_count">0</span> &nbsp;&nbsp;
                            <div style="background-color:whitesmoke; padding:8px; border:1px solid lightgray; text-align:left;">
                                <button @onclick="PreviousPage" title="Previous" style="background:none; border:none;">
                                    <i class="material-icons" style="color:black;">arrow_back</i>
                                </button>
                                <button @onclick="NextPage" title="Next" style="background:none; border:none;">
                                    <i class="material-icons" style="color:black;">arrow_forward</i>
                                </button>
                                <button @onclick="ZoomIn" title="Zoom In" style="background:none; border:none;">
                                    <i class="material-icons" style="color:black;">zoom_in</i>
                                </button>
                                <button @onclick="ZoomOut" title="Zoom Out" style="background:none; border:none;">
                                    <i class="material-icons" style="color:black;">zoom_out</i>
                                </button>
                                <button @onclick="PrintPdf" title="Print" style="background:none; border:none;">
                                    <i class="material-icons" style="color:black;">print</i>
                                </button>
                            </div>
                            <div @ref="pdfContainer" id="pdf-container"
                                 style="border: 0px solid #ccc; width: 100%; height: 800px;"></div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (IsWizardVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Report Wizard</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseReportWizardPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <label>Select Table/View: </label>
                        <select @onchange="@(async (args) =>
                            {
                                CurrentSelectedTableWizard = args.Value?.ToString();
                            })">
                            @foreach (var table in TableList)
                            {
                                <option value="@table" selected="@(table == CurrentSelectedTableWizard ? "selected" : null)">
                                    @table
                                </option>
                            }
                        </select>
                        &nbsp;&nbsp;
                        <button @onclick="onReportWizard">Select</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowDeleteConfirmation)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Confirm Delete</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseDeleteConfirmationPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space" style="text-align: center;">

                        <span>&nbsp; &nbsp;</span>
                        <button @onclick="DeleteAsync">Yes</button>
                        <span>&nbsp; &nbsp;</span>
                        <button @onclick="CloseDeleteConfirmationPopup">No</button>

                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (IsSaveReportPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">New Report</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseNewReportPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <form @onsubmit="SaveReport">
                            <div>
                                <label><b>Current Database:</b> @CurrentDatabaseName</label>
                            </div>
                            <br />
                            <div>
                                <label for="ReportName">Report Name:</label>
                                <input type="text" id="ReportName" maxlength="50" style="width: 150px;" @bind="CurrentReportNameWithoutDatabase" />
                                &nbsp;&nbsp;
                                <button type="submit">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (Message != "")
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Alert!</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseMessagePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 100%; height: 100px; overflow: auto">
                            @Message
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ElementReference pdfContainer;

    private bool ContentChanged { get; set; }

    private List<string> TableList = new List<string>();
    private string CurrentSelectedTableWizard = "";

    private bool IsLoading { get; set; } = false;
    private List<string> ReportList = new List<string>();
    private string CurrentReportName = "";

    List<string> colAllDatabases = new List<string>();
    string CurrentDatabaseName = "Default";
    string CurrentReportNameWithoutDatabase = string.Empty;
    bool ShowDeleteConfirmation = false;

    private bool IsWizardVisible { get; set; } = false;
    private bool IsSaveReportPopupVisible { get; set; } = false;
    private bool IsNewOutputPopupVisible { get; set; } = false;

    private int CurrentPage = 1;

    string Message = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadReportsListDropdownSelectDefaultReportAsync();
        colAllDatabases = await databaseService.GetAllDatabasesAsync();
        await LoadTableAndViewListDropdownAsync();
    }

    // Tables and Views Dropdown

    private async Task LoadTableAndViewListDropdownAsync()
    {
        TableList = new List<string>();

        var colTables = await databaseService.GetAllTablesAsync();

        if (colTables.Count > 0)
        {
            // Add each table to the list prepended with "Table: "
            foreach (var table in colTables)
            {
                TableList.Add($"Table: {table}");
            }
        }

        // Get all Views
        var colViews = await databaseService.GetAllViewsAsync();

        if (colViews.Count > 0)
        {
            // Add each view to the list prepended with "View: "
            foreach (var view in colViews)
            {
                TableList.Add($"View: {view}");
            }
        }

        // Sort the list
        TableList.Sort();

        // sort so that entries that begin with "default/" are listed first
        TableList.Sort(
            (x, y) => x.StartsWith("Default/") == y.StartsWith("Default/")
            ? 0
            : x.StartsWith("Default/") ? -1 : 1);

        // Add: * Select DataSource* at the end of the list
        TableList.Add("*Select DataSource*");

        CurrentSelectedTableWizard = TableList.Last();
    }

    // Report Dropdown

    private async Task LoadReportListDropdownAsync()
    {
        ReportList = new List<string>();
        ReportList = await databaseService.GetAllReportsAsync();
    }

    // Reports Dropdown

    private async Task LoadReportsListDropdownSelectDefaultReportAsync()
    {
        await LoadReportListDropdownAsync();

        if (ReportList.Count > 0)
        {
            CurrentReportName = ReportList.First();
        }
    }

    private void LoadReport(string paramReport)
    {
        // Separate the report name from the database
        var (Database, ReportName) = DataService.ExtractDatabaseAndTable(paramReport);

        // Load the DataReport
        String ReportsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{Database}/Reports";
        var fileName = Path.Combine(ReportsFolder, $"{ReportName}.rdlc");

        if (System.IO.File.Exists(fileName))
        {
            // Set CurrentReportName
            //"CurrentReportName " needs to have the database prepended in front of the name
            CurrentReportName = paramReport;
        }
        else
        {
            Message = "Report not found.";
        }
        ;
    }

    // Delete

    private void onDeleteConfirmation()
    {
        if (CurrentReportName.Trim().Length == 0)
        {
            Message = "Must save Report first.";
        }
        else
        {
            ShowDeleteConfirmation = true;
        }
    }

    private async Task DeleteAsync()
    {
        ShowDeleteConfirmation = false;

        // Separate the report name from the database
        var (Database, ReportName) = DataService.ExtractDatabaseAndTable(CurrentReportName);

        // Delete the file
        String ReportsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{Database}/Reports";
        var fileName = Path.Combine(ReportsFolder, $"{ReportName}.rdlc");

        if (System.IO.File.Exists(fileName))
        {
            System.IO.File.Delete(fileName);
        }

        CurrentReportName = string.Empty;

        Message = $"{ReportName} deleted!";

        await LoadReportsListDropdownSelectDefaultReportAsync();
    }

    private void DeleteConfirmation()
    {
        ShowDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmationPopup()
    {
        ShowDeleteConfirmation = false;
    }

    // Report Wizard

    private void onReportWizard()
    {
        if (string.IsNullOrEmpty(CurrentSelectedTableWizard) || (CurrentSelectedTableWizard == "*Select DataSource*"))
        {
            Message = "Please select a table or a view.";
            return;
        }

        if (CurrentSelectedTableWizard.StartsWith("Table:"))
        {
            string TableWizardName = CurrentSelectedTableWizard.Substring(7);

            // Separate the table name from the database
            var (Database, TableName) = DataService.ExtractDatabaseAndTable(TableWizardName);

            CurrentDatabaseName = Database;
            CurrentReportNameWithoutDatabase = $"Report{TableName}";
        }
        else if (CurrentSelectedTableWizard.StartsWith("View:"))
        {
            string TableWizardName = CurrentSelectedTableWizard.Substring(6);

            // Separate the view name from the database
            var (Database, ViewName) = DataService.ExtractDatabaseAndTable(TableWizardName);

            CurrentDatabaseName = Database;
            CurrentReportNameWithoutDatabase = $"Report{ViewName}";
        }

        // Open the New Table popup
        IsWizardVisible = false;
        IsSaveReportPopupVisible = true;
    }

    // Popups

    private void OpenWizard()
    {
        IsWizardVisible = true;
    }

    private void CloseNewReportPopup()
    {
        IsSaveReportPopupVisible = false;
    }

    private void CloseOutputReportPopup()
    {
        IsNewOutputPopupVisible = false;
    }

    private void CloseReportWizardPopup()
    {
        IsWizardVisible = false;
    }

    private void CloseMessagePopup()
    {
        Message = "";
    }

    // Save

    private void SaveReport()
    {
        if (string.IsNullOrEmpty(CurrentReportNameWithoutDatabase))
        {
            Message = "Please enter a Report name.";
            return;
        }

        // Remove spaces and special characters
        string CleanedName = databaseService.RemoveSpacesSpecialCharacters(CurrentReportNameWithoutDatabase);

        if (CleanedName != CurrentReportNameWithoutDatabase)
        {
            CurrentReportNameWithoutDatabase = CleanedName;
            Message = $"Report Name will be {CurrentReportNameWithoutDatabase}";
            return;
        }

        // Check for duplicates
        if (DetectDuplicates(CurrentDatabaseName, CurrentReportNameWithoutDatabase))
        {
            Message = "A Table or View with this name already exists.";
            return;
        }

        // CurrentObjectName is everything after the "/" in CurrentSelectedTableWizard
        string CurrentObjectDataName = CurrentSelectedTableWizard.Substring(CurrentSelectedTableWizard.IndexOf("/") + 1);

        String ReportsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Reports";
        var fileName = Path.Combine(ReportsFolder, $"{CurrentReportNameWithoutDatabase}.rdlc");

        // Load the code for the class we want to generate the RDL for
        String ClassesFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Classes";
        var codeFile = Path.Combine(ClassesFolder, $"{CurrentObjectDataName}.cs");

        if (!System.IO.File.Exists(codeFile))
        {
            Message = $"{codeFile} Code file not found.";
            return;
        }

        // Load the code from the file
        var code = System.IO.File.ReadAllText(codeFile);

        // Get the Type for the class we want to generate the RDL for
        var ClassType = XsdGenerator.GetTypeFromCode(code, DataService.FirstCharToUpper(CurrentObjectDataName));

        // Generate an RDL string dynamically:
        string rdlXml = DynamicRdlBuilder.GenerateDynamicRdl(
            ClassType,
            reportTitle: $"{CurrentReportNameWithoutDatabase} Report",
            schemaPath: @$"{ReportsFolder}\Data\{CurrentObjectDataName}.xsd"
        );

        // You can then save the string to a .rdl file:
        System.IO.File.WriteAllText(fileName, rdlXml);

        Message = $"{CurrentReportNameWithoutDatabase} saved!";

        // Add the database name to the CurrentReportName
        CurrentReportName = $"{CurrentDatabaseName}/{CurrentReportNameWithoutDatabase}";

        // ** Close the popup if visible
        IsSaveReportPopupVisible = false;

        // Reload the dropdown
        ReportList = new List<string>();

        if (Directory.Exists(ReportsFolder))
        {
            ReportList = Directory.GetFiles(ReportsFolder, "*.rdlc")
                                 .Select(Path.GetFileNameWithoutExtension)
                                 .ToList();
        }

        // Load the Report
        LoadReport(CurrentReportName);
    }

    // Code Execution

    #region RunCode
    private async Task Execute()
    {
        try
        {
            IsNewOutputPopupVisible = true;

            IsLoading = true;

            await PrepareReportAsync();

            IsLoading = false;

            CurrentPage = 1;
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
        }
    }
    #endregion

    // Report Viewer

    private async Task PrepareReportAsync()
    {
        // Separate the report name from the database
        var (Database, ReportName) = DataService.ExtractDatabaseAndTable(CurrentReportName);

        // Create the report
        using var report = new LocalReport();

        // Define the report parameters
        var parameters = new[] { new ReportParameter("Title", ReportName) };

        // Load the report definition
        String ReportsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{Database}/Reports";
        var reportPath = Path.Combine(ReportsFolder, $"{ReportName}.rdlc");

        if (!System.IO.File.Exists(reportPath))
        {
            Message = "Report file not found.";
            return;
        }

        // Load the report definition (the RDLC file)
        await using var reportStream = System.IO.File.OpenRead(reportPath);
        using var reportReader = new System.IO.StreamReader(reportStream);
        report.LoadReportDefinition(reportReader);

        // ************
        // Get the report data
        // ************

        // Determine if it is a Table or a View
        // If the file is in the Parquet folder, it is a Table
        // If the file is in the Views folder, it is a View
        // Open the .rdlc file and get the SchemaPath to get the ClassName
        String ClassType = "Table";
        var ClassName = XsdGenerator.GetTableName(reportPath);
        String viewsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{Database}/Views";
        var fileName = Path.Combine(viewsFolder, $"{ClassName}.view");
        if (System.IO.File.Exists(fileName))
        {
            ClassType = "View";
        }

        IEnumerable<IDictionary<string, object>> result = new List<IDictionary<string, object>>();

        Dataloader dataloader = new Dataloader();

        // Get the data based on the ClassType

        if (ClassType == "Table")
        {
            // Get the data from the Parquet file
            result = await dataloader.LoadParquet(Database, ClassName);
        }
        else // View
        {
            // Get the data from the View file
            result = await dataloader.LoadView(Database, ClassName);
        }

        // Get the fields from the first record (ensure result is not empty)
        var fields = result.Any()
            ? result.First().Keys.ToList()
            : new List<string>();

        // Create a DataTable
        DataTable dt = new DataTable("MyDataTable");

        // Add an Id column
        dt.Columns.Add("Id", typeof(int));

        // Add columns for all fields (replace spaces with underscores)
        foreach (var field in fields)
        {
            string columnName = field.Replace(" ", "_");
            dt.Columns.Add(columnName, typeof(object));
        }

        // Fill the DataTable rows
        int i = 0;
        foreach (var item in result)
        {
            DataRow newRow = dt.NewRow();
            newRow["Id"] = i++;

            foreach (var field in fields)
            {
                string columnName = field.Replace(" ", "_");
                newRow[columnName] = item.ContainsKey(field) ? item[field] : null;
            }

            dt.Rows.Add(newRow);
        }

        // Add the data source to the report
        report.DataSources.Add(new ReportDataSource("DataSet1", dt));

        // Set any report parameters (if needed)
        report.SetParameters(parameters);

        // Render the report to a PDF byte array
        byte[] pdfBytes = report.Render("PDF");

        // To display properly we need to save the PDF as a file and re-load it
        ReportsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{Database}/Reports";
        var pdfPath = System.IO.Path.Combine(ReportsFolder, $"{DateTime.Now.Ticks.ToString()}-TempReport.pdf");

        // Save the pdf to the temp file
        System.IO.File.WriteAllBytes(pdfPath, pdfBytes);

        // Open the temp PDF file and read the bytes
        await using (var pdfStream = System.IO.File.OpenRead(pdfPath))
        {
            using (var memoryStream = new System.IO.MemoryStream())
            {
                await pdfStream.CopyToAsync(memoryStream);
                pdfBytes = memoryStream.ToArray();
            }
        }

        // Convert the PDF bytes to a base64 string
        var pdfBase64 = Convert.ToBase64String(pdfBytes);

        // Call the JavaScript function with the element reference and the PDF data
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.renderPdf", pdfContainer, pdfBase64);

        // Delete the temp pdf file
        System.IO.File.Delete(pdfPath);
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await jsRuntime.InvokeVoidAsync("blazorPdfViewer.previousPage", pdfContainer);
        }
    }

    private async Task NextPage()
    {
        // get the number of pages
        var pageCount = await jsRuntime.InvokeAsync<int>("blazorPdfViewer.getPageCount", pdfContainer);

        if (CurrentPage < pageCount)
        {
            CurrentPage++;
            await jsRuntime.InvokeVoidAsync("blazorPdfViewer.nextPage", pdfContainer);
        }
    }

    private async Task ZoomIn()
    {
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.zoomIn", pdfContainer);
    }

    private async Task ZoomOut()
    {
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.zoomOut", pdfContainer);
    }

    private async Task PrintPdf()
    {
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.printPdf", pdfContainer);
    }

    #region public async Task<IEnumerable<IDictionary<string, object>>> RunDynamicCode(string paramCode)
    public async Task<IEnumerable<IDictionary<string, object>>> RunDynamicCode(string paramCode)
    {
        try
        {
            dynamic script = CSScript.Evaluator.LoadMethod(paramCode);

            var result = await script.ReturnResult();

            return result as IEnumerable<IDictionary<string, object>>;
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
            return null;
        }
    }
    #endregion


    // Duplicates

    #region public static bool DetectDuplicates(string paramDatabaseName, string paramParquetName)
    public static bool DetectDuplicates(string paramDatabaseName, string paramParquetName)
    {
        bool result = false;

        // Check if the table name already exists
        String folderPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{paramDatabaseName}/Views";

        string fileName = $"{folderPath}/{paramParquetName}.view";
        var ParquetExists = System.IO.File.Exists(fileName);

        String ReportsFolderPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/{paramDatabaseName}/Reports";

        fileName = $"{ReportsFolderPath}/{paramParquetName}.rdlc";
        var ViewExists = System.IO.File.Exists(fileName);

        if (ParquetExists || ViewExists)
        {
            result = true;
        }

        return result;
    }
    #endregion
}