@using System.Text
@using CommunityToolkit.Maui.Storage
@using PersonalDataWarehousePOC.Services
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject DatabaseService DatabaseService
<div class="row">
    <div class="col">
        @if (DatabaseList.Count > 0)
        {
            <label>Database: </label>
            <select @onchange="@(async (args) =>
                    {
                        CurrentDatabaseName = args.Value?.ToString();
                    })">
                @foreach (var database in DatabaseList)
                {
                    <option value="@database"
                            selected="@(database == CurrentDatabaseName ? "selected" : null)">
                        @database
                    </option>
                }
            </select>
        }
    </div>
</div>
<br />
<div class="row">
    <div class="col">
        <button @onclick="()=> NewDatabase()">
            New Database
        </button>
        <span>&nbsp; &nbsp;</span>
        @if (CurrentDatabaseName != "Default")
        {
            <button @onclick="()=> DeleteDatabase()">
                Delete Database
            </button>
            <span>&nbsp; &nbsp;</span>
        }
        <button @onclick="()=> RenameDatabase()">
            Rename Database
        </button>
        <span>&nbsp; &nbsp;</span>
        <button @onclick="()=> ExportDatabase()">
            Export Database
        </button>
        <span>&nbsp; &nbsp;</span>
        <button @onclick="()=> UploadDatabase()">
            Upload Database
        </button>
        <span>&nbsp; &nbsp;</span>
    </div>
</div>
<br />
@code {
    private List<string> DatabaseList = new List<string>();
    private string CurrentDatabaseName = string.Empty;

    protected override void OnInitialized()
    {
        DatabaseService objDatabaseService = new DatabaseService();
        DatabaseList = objDatabaseService.GetDatabaseList();
    }

    private void NewDatabase()
    {
        try
        {
            DatabaseService objDatabaseService = new DatabaseService();
            //objDatabaseService.CreateDatabase();

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void DeleteDatabase()
    {
        try
        {

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Log Cleared",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task ExportDatabase()
    {
        try
        {


        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void RenameDatabase()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void UploadDatabase()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}
