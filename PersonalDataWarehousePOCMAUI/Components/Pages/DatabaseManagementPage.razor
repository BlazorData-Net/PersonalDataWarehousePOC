@using System.Text
@using CommunityToolkit.Maui.Storage
@using PersonalDataWarehousePOC.Services
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject DatabaseService DatabaseService
<div class="row">
    <div class="col">
        @if (DatabaseList.Count > 0)
        {
            <label>Database: </label>
            <select @onchange="@(async (args) =>
                    {
                        CurrentDatabaseName = args.Value?.ToString();
                    })">
                @foreach (var database in DatabaseList)
                {
                    <option value="@database"
                    selected="@(database == CurrentDatabaseName ? "selected" : null)">
                        @database
                    </option>
                }
            </select>
        }
    </div>
</div>
<br />
<div class="row">
    <div class="col">
        <button @onclick="()=> NewDatabase()">
            New Database
        </button>
        <span>&nbsp; &nbsp;</span>
        @if (CurrentDatabaseName != "Default")
        {
            <button @onclick="()=> DeleteDatabasePopup()">
                Delete Database
            </button>
            <span>&nbsp; &nbsp;</span>
        }
        <button @onclick="()=> RenameDatabase()">
            Rename Database
        </button>
        <span>&nbsp; &nbsp;</span>
        <button @onclick="()=> ExportDatabase()">
            Export Database
        </button>
        <span>&nbsp; &nbsp;</span>
        <button @onclick="()=> UploadDatabase()">
            Upload Database
        </button>
        <span>&nbsp; &nbsp;</span>
    </div>
</div>
<br />
<!-- POPUPS -->

@if (NewDatabasePopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">New Database</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseNewDatabasePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <form @onsubmit="SaveDatabaseAsync">
                            <div>
                                <label for="tableName">Database Name:</label>
                                <input type="text" id="tableName" maxlength="50" style="width: 300px;" @bind="CurrentDatabaseName" />
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <button type="submit">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (Message != "")
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Alert!</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseMessagePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 100%; height: 100px; overflow: auto">
                            @Message
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowDeleteConfirmation)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Confirm Delete</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseDeleteConfirmationPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space" style="text-align: center;">

                        <span>&nbsp; &nbsp;</span>
                        <button @onclick="DeleteDatabase">Yes</button>
                        <span>&nbsp; &nbsp;</span>
                        <button @onclick="CloseDeleteConfirmationPopup">No</button>

                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@code {
    private List<string> DatabaseList = new List<string>();
    private string CurrentDatabaseName = string.Empty;
    private string Message = string.Empty;

    bool NewDatabasePopupVisible = false;
    bool ShowDeleteConfirmation = false;

    protected override void OnInitialized()
    {
        DatabaseService objDatabaseService = new DatabaseService();
        DatabaseList = objDatabaseService.GetDatabaseList();
    }

    private void NewDatabase()
    {
        try
        {
            DatabaseService objDatabaseService = new DatabaseService();
            //objDatabaseService.CreateDatabase();

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void DeleteDatabase()
    {
        try
        {

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Log Cleared",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task ExportDatabase()
    {
        try
        {


        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void RenameDatabase()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void UploadDatabase()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task SaveDatabaseAsync()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    // POPUP METHODS

    private async Task DeleteDatabasePopup()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task CloseNewDatabasePopup()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task CloseMessagePopup()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task CloseDeleteConfirmationPopup()
    {
        try
        {

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

}
