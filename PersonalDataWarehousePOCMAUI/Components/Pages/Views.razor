@page "/views"
@using System.Text.Json
@using System.Linq.Dynamic.Core
@using CSScriptLib
@using System.Reflection
@using System.Text
@using OpenAI;
@using Microsoft.Extensions.AI;
@using System.Diagnostics.CodeAnalysis
@using PersonalDataWarehousePOC.Services
@using PersonalDataWarehousePOCMAUI.Services
@using MonacoRazor
@inject DatabaseService databaseService
@inject DataService DataService
@inject SettingsService SettingsService

<PageTitle>Views</PageTitle>

<h4>Views</h4>
<br />
@if (IsLoading)
{
    <div role="progressbar" class="marquee" style="width: 25%"></div>
}
else
{
    <div>
        @if (ViewList.Count > 0)
        {
            <label>Select View: </label>
            <select @onchange="@(async (args) =>
                    {
                        CurrentViewName = args.Value?.ToString();
                        await LoadViewAsync(CurrentViewName);
                    })">
                @foreach (var view in ViewList)
                {
                    <option value="@view"
                    selected="@(view == CurrentViewName ? "selected" : null)">
                        @view
                    </option>
                }
            </select>
        }
    </div>
    <br />
    <div>
        @if (TableList.Count > 0)
        {
            <button @onclick="OpenWizard">Table Wizard</button>
            <span>&nbsp;</span>
        }
        <button @onclick="NewScript">New</button>
        &nbsp;
        <button @onclick="OnEditorSaveRequested">Save</button>
        @if (CurrentViewName != "")
        {
            <span>&nbsp; &nbsp;</span>
            <button @onclick="DeleteAsync">Delete</button>
        }
        &nbsp;
        <button @onclick="Execute">Execute</button>
        &nbsp;
        <button @onclick="OpenAIPopup">AI</button>
        @if (ContentChanged)
        {
            <span style="color:red">&nbsp;&nbsp;<b>Editing...</b></span>
        }
        <br />
        <CodeEditor @ref="@MonacoCodeEditor" Language="csharp" Code="@CurrentScript" OnCompletionsRequested="GetCompletionsAsync" />
    </div>
    <br />
}

<!-- POPUPS -->
@if (IsNewOutputPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog" style="max-width: 90%; margin-top: 5%;">
            <div class="modal-content">
                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Output</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseOutputTablePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">

                        <RadzenDataGrid Data="@objDataParameters.data"
                        ColumnWidth="200px"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true">
                            <Columns>
                                @foreach (var column in objDataParameters.columns)
                                {
                                    <RadzenDataGridColumn @key=@column.Key
                                    Title="@column.Key"
                                    Type="column.Value"
                                    Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                                        <Template>
                                            @context[@column.Key]
                                        </Template>
                                    </RadzenDataGridColumn>
                                }
                            </Columns>
                        </RadzenDataGrid>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (IsWizardVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Table Wizard</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseTableWizardPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <label>Select Table: </label>
                        <select @onchange="@(async (args) =>
                            {
                                CurrentSelectedTableWizard = args.Value?.ToString();
                            })">
                            @foreach (var table in TableList)
                            {
                                <option value="@table">
                                    @table
                                </option>
                            }
                        </select>
                        &nbsp;&nbsp;
                        <button @onclick="onTableWizardAsync">Select</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (IsSaveViewPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">New View</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseNewViewPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <form @onsubmit="SaveViewAsync">
                            <div>
                                <label>Select Database: </label>
                                <select @onchange="@(async (args) =>
                                {
                                    CurrentDatabaseName = args.Value?.ToString();
                                })">
                                    @foreach (var database in colAllDatabases)
                                    {
                                        <option value="@database"
                                        selected="@(database == CurrentDatabaseName ? "selected" : null)">
                                            @database
                                        </option>
                                    }
                                </select>
                            </div>
                            <br />
                            <div>
                                <label for="tableName">View Name:</label>
                                <input type="text" id="tableName" maxlength="50" style="width: 300px;" @bind="CurrentViewName" />
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <button type="submit">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowAI)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">AI Prompt</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseAIPopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 100%; height: 200px; overflow: auto">
                            <textarea @bind="AIMessage" maxlength="1000"
                            style="width: 100%; height: 190px; overflow: auto; resize: vertical;">
                            </textarea>
                        </div>
                        <br />
                        <button @onclick="AIbtn">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (Message != "")
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Alert!</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseMessagePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 100%; height: 100px; overflow: auto">
                            @Message
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private CodeEditor MonacoCodeEditor { get; set; }
    private bool ContentChanged { get; set; }
    private string CurrentScript { get; set; } = string.Empty;

    private DataParameters objDataParameters = new DataParameters();

    private bool IsLoading { get; set; } = false;
    private List<string> TableList = new List<string>();
    private List<string> ViewList = new List<string>();
    private string CurrentViewName = "";

    List<string> colAllDatabases = new List<string>();
    string CurrentDatabaseName = "Default";
    string CurrentViewNameWithoutDatabase = string.Empty;

    private bool IsWizardVisible { get; set; } = false;
    private bool IsSaveViewPopupVisible { get; set; } = false;
    private bool IsNewOutputPopupVisible { get; set; } = false;
    private string CurrentSelectedTableWizard = "";

    private bool ShowAI { get; set; } = false;
    private string AIMessage = "";

    string Message = "";

    protected override void OnInitialized()
    {
        CurrentScript = SampleCode;

        objDataParameters = new DataParameters();
        objDataParameters.data = new List<IDictionary<string, object>>();
        objDataParameters.columns = new Dictionary<string, Type>();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadViewsListDropdownAsync();
        colAllDatabases = await databaseService.GetAllDatabasesAsync();
        await LoadTableListDropdownAsync();
    }    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ViewList.Count > 0)
            {
                CurrentViewName = ViewList.First();
                await LoadViewAsync(CurrentViewName);
            }
        }
    }

    Task<Suggestion[]> GetCompletionsAsync(string currentValue, Position position)
    {
        return Task.FromResult(new[]
        {
            new Suggestion {Label = "From C#", InsertText = "From C#" },
            new Suggestion {Label = "OK", InsertText = "OK" },
        });
    }

    private async Task OnEditorSaveRequested()
    {
        if (CurrentViewName == "")
        {
            // Open a popup to enter the view name
            IsSaveViewPopupVisible = true;
            return;
        }

        // Remove spaces and special characters 
        CurrentViewName = databaseService.RemoveSpacesSpecialCharacters(CurrentViewName);

        // Save to file in Data/Views
        String viewsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Views";

        var fileName = Path.Combine(viewsFolder, $"{CurrentViewName}.view");

        if (ContentChanged)
        {
            Message = $"{CurrentViewName} saved!";
        }

        await MonacoCodeEditor.UpdateCodeAsync(CurrentScript);

        await System.IO.File.WriteAllTextAsync(fileName, CurrentScript);

        // Execute the code
        var objResult = await RunDynamicCode(CurrentScript);

        List<string> columns = new List<string>();

        if (objResult != null)
        {
            // Parse objDataParametersResult.data to a list of dictionaries
            var TempColumns = objResult.Select(x => x.ToDictionary(y => y.Key, y => y.Value)).FirstOrDefault();

            columns = TempColumns.Keys.ToList();
        }

        // ** Build the class definition and dictionary mapping

        // Build the class definition
        StringBuilder ClassDefinition = new StringBuilder();
        ClassDefinition.AppendLine($"public class {DataService.FirstCharToUpper(CurrentViewName)}");
        ClassDefinition.AppendLine("    {");

        // Add an Id property to the class
        ClassDefinition.AppendLine("        public int Id { get; set; }");

        // For each column in the DataTable, create a string property
        foreach (var column in columns)
        {
            // Ensure the property name is a valid C# identifier
            string propertyName = column.Replace(" ", "_");

            ClassDefinition.AppendLine
            ($"        public string {propertyName} {{ get; set; }}");
        }

        ClassDefinition.AppendLine("    }");

        // Build the dictionaryMapping
        StringBuilder DictionaryMapping = new StringBuilder();

        foreach (var column in columns)
        {
            // Replace spaces in the column name with underscores to make it a valid C# identifier
            string propertyName = column.Replace(" ", "_");

            // Build the line:
            DictionaryMapping.AppendLine(
                $"                        {propertyName} = dict.ContainsKey(\"{propertyName}\") "
                + "? dict[\"{propertyName}\"]?.ToString() : null,");
        }

        // ** Open the View.txt template from Templates\View.txt and replace the content with the codeBuilder
        string templatePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Templates", "View.txt");

        // Read the content of the template file
        string templateContent = File.ReadAllText(templatePath);

        // Replace the placeholders
        string codeBuilder = "";

        codeBuilder = templateContent.Replace("**CLASS NAME**", DataService.FirstCharToUpper(CurrentViewName));
        codeBuilder = codeBuilder.Replace("**CLASS DEFINITION**", ClassDefinition.ToString());
        codeBuilder = codeBuilder.Replace("**DICTIONARY MAPPING**", DictionaryMapping.ToString());
        codeBuilder = codeBuilder.Replace("**CLASS UPPERCASE WITH AN S**", (DataService.FirstCharToUpper(CurrentViewName) + "s"));
        codeBuilder = codeBuilder.Replace("**CLASS LOWERCASE WITH AN S**", (CurrentViewName.ToLower() + "s"));
        codeBuilder = codeBuilder.Replace("**FIRST FIELD**", columns[0]);

        // ** Write the class to a file

        // Define directory for output
        String directoryPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Classes";

        // Set the file path
        string filePath = $@"{directoryPath}/{CurrentViewName}.cs";

        // Write the class to file
        File.WriteAllText(filePath, codeBuilder.ToString());

        // **********************
        // ** Create the xsd file
        // **********************

        // Load the class and generate the schema
        // Load the class by using its name and get its type

        String ClassesFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Classes";
        var codeFile = Path.Combine(ClassesFolder, $"{CurrentViewName}.cs");

        if (!System.IO.File.Exists(codeFile))
        {
            Message = $"{codeFile} Code file not found.";
            return;
        }

        // Load the code from the file
        var code = System.IO.File.ReadAllText(codeFile);

        // Get the Type for the class we want to generate the RDL for
        var ClassType = XsdGenerator.GetTypeFromCode(code, DataService.FirstCharToUpper(CurrentViewName));

        // Step 1: Generate the schema string
        string schemaString = XsdGenerator.GenerateSchemaForType(ClassType);

        // Step 3: Save the file
        directoryPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Reports/Data";
        filePath = Path.Combine(directoryPath, $"{CurrentViewName}Schemas.xsd");
        File.WriteAllText(filePath, schemaString);

        ContentChanged = false;
    }

    // Table Dropdown

    private async Task LoadTableListDropdownAsync()
    {
        TableList = new List<string>();
        TableList = await databaseService.GetAllTablesAsync();
    }

    // Views Dropdown

    private async Task LoadViewsListDropdownAsync()
    {
        ViewList = new List<string>();
        ViewList = await databaseService.GetAllViewsAsync();
    }

    private async Task LoadViewAsync(string paramView)
    {
        // Seperate the view name from the database
        var (Database, View) = DataService.ExtractDatabaseAndTable(paramView);

        // Load the DataTable
        String viewsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{Database}/Views";

        var fileName = $"{viewsFolder}/{View}.view";

        if (System.IO.File.Exists(fileName))
        {
            // Read contents into CurrentScript
            CurrentScript = System.IO.File.ReadAllText(fileName);

            await MonacoCodeEditor.UpdateCodeAsync(CurrentScript);

            // Set CurrentViewName
            CurrentViewName = paramView;
        }
        else
        {
            Message = "View not found.";
        }
    }

    // Delete

    private async Task DeleteAsync()
    {
        if (CurrentViewName.Trim().Length == 0)
        {
            Message = "Must save view first.";
        }
        else
        {
            // Delete the file
            String viewsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Views";

            var fileName = Path.Combine(viewsFolder, $"{CurrentViewName}.view");
            if (System.IO.File.Exists(fileName))
            {
                System.IO.File.Delete(fileName);
            }

            // Delete the C# class file
            String ClassesFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Classes";

            fileName = Path.Combine(ClassesFolder, $"{CurrentViewName}.cs");
            if (System.IO.File.Exists(fileName))
            {
                System.IO.File.Delete(fileName);
            }

            // Delete the XSD file
            String ReportsDataFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Reports/Data";

            fileName = Path.Combine(ReportsDataFolder, $"{CurrentViewName}Schemas.xsd");
            if (System.IO.File.Exists(fileName))
            {
                System.IO.File.Delete(fileName);
            }

            string deletedViewName = CurrentViewName;
            CurrentViewName = string.Empty;

            Message = $"{deletedViewName} deleted!";

            await LoadViewsListDropdownAsync();

            if (ViewList.Count > 0)
            {
                CurrentViewName = ViewList.First();
                await LoadViewAsync(CurrentViewName);
            }
        }
    }

    // New Script

    private async Task NewScript()
    {       
        CurrentScript = SampleCode;
        CurrentViewName = "";

        await MonacoCodeEditor.UpdateCodeAsync(CurrentScript);
    }

    // Table Wizard

    private async Task onTableWizardAsync()
    {
        if (string.IsNullOrEmpty(CurrentSelectedTableWizard))
        {
            Message = "Please select a table.";
            return;
        }

        CurrentScript = $"using System;\n";
        CurrentScript += $"using System.Collections.Generic;\n";
        CurrentScript += $"using System.Linq;\n";
        CurrentScript += $"using System.Threading.Tasks;\n";
        CurrentScript += $"\n";
        CurrentScript += $"public async Task<IEnumerable<IDictionary<string, object>>> ReturnResult()\n";
        CurrentScript += "{\n";
        CurrentScript += $"    // Create a Dataloader \n";
        CurrentScript += $"    Dataloader objDataloader = new Dataloader();\n";
        CurrentScript += $"    // Call LoadParquet to load {CurrentSelectedTableWizard} into col{CurrentSelectedTableWizard} \n";
        CurrentScript += $@"    var col{CurrentSelectedTableWizard} = await objDataloader.LoadParquet(""{CurrentSelectedTableWizard}"");";
        CurrentScript += $"\n";
        CurrentScript += $"    // Return the results ToDictionary()  \n";
        CurrentScript += $"    return col{CurrentSelectedTableWizard}.Select(row => row.ToDictionary()).Take(100).ToList();";
        CurrentScript += "\n";
        CurrentScript += "}\n";        

        CloseTableWizardPopup();

        CurrentSelectedTableWizard = "";

        await MonacoCodeEditor.UpdateCodeAsync(CurrentScript);
    }

    // Popups

    private void OpenWizard()
    {
        CurrentSelectedTableWizard = TableList.FirstOrDefault();
        CurrentViewName = ""; // So the new View name popup will show on Save
        IsWizardVisible = true;
    }

    private void CloseNewViewPopup()
    {
        IsSaveViewPopupVisible = false;
    }

    private void CloseOutputTablePopup()
    {
        IsNewOutputPopupVisible = false;
    }

    private void CloseTableWizardPopup()
    {
        IsWizardVisible = false;
    }

    private void CloseMessagePopup()
    {
        Message = "";
    }

    private async Task SaveViewAsync()
    {
        if (string.IsNullOrEmpty(CurrentViewName))
        {
            Message = "Please enter a view name.";
            return;
        }

        // Seperate the view name from the database
        var (Database, View) = DataService.ExtractDatabaseAndTable(CurrentViewName);

        // Remove spaces and special characters
        string CleanedName = databaseService.RemoveSpacesSpecialCharacters(View);

        if (CleanedName != View)
        {
            CurrentViewName = CleanedName;
            Message = $"View Name will be {CurrentViewName}";
            return;
        }

        String viewsFolder = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Views";

        var fileName = Path.Combine(viewsFolder, $"{CurrentViewName}.view");

        await System.IO.File.WriteAllTextAsync(fileName, CurrentScript);

        // Execute the code
        var objResult = await RunDynamicCode(CurrentScript);

        List<string> columns = new List<string>();

        if (objResult != null)
        {
            // Parse objDataParametersResult.data to a list of dictionaries
            var TempColumns = objResult.Select(x => x.ToDictionary(y => y.Key, y => y.Value)).FirstOrDefault();

            columns = TempColumns.Keys.ToList();
        }

        // ** Build the class definition and dictionary mapping

        // Build the class definition
        StringBuilder ClassDefinition = new StringBuilder();
        ClassDefinition.AppendLine($"public class {DataService.FirstCharToUpper(CurrentViewName)}");
        ClassDefinition.AppendLine("    {");

        // Add an Id property to the class
        ClassDefinition.AppendLine("        public int Id { get; set; }");

        // For each column in the DataTable, create a string property
        foreach (var column in columns)
        {
            // Ensure the property name is a valid C# identifier
            string propertyName = column.Replace(" ", "_");

            ClassDefinition.AppendLine
            ($"        public string {propertyName} {{ get; set; }}");
        }

        ClassDefinition.AppendLine("    }");

        // Build the dictionaryMapping
        StringBuilder DictionaryMapping = new StringBuilder();

        foreach (var column in columns)
        {
            // Replace spaces in the column name with underscores to make it a valid C# identifier
            string propertyName = column.Replace(" ", "_");

            // Build the line:
            DictionaryMapping.AppendLine(
                $"                        {propertyName} = dict.ContainsKey(\"{propertyName}\") "
                + "? dict[\"{propertyName}\"]?.ToString() : null,");
        }

        // ** Open the View.txt template from Templates\View.txt and replace the content with the codeBuilder
        string templatePath = Path.Combine("Templates", "View.txt");

        // Read the content of the template file
        string templateContent = File.ReadAllText(templatePath);

        // Replace the placeholders
        string codeBuilder = "";

        codeBuilder = templateContent.Replace("**CLASS NAME**", DataService.FirstCharToUpper(CurrentViewName));
        codeBuilder = codeBuilder.Replace("**CLASS DEFINITION**", ClassDefinition.ToString());
        codeBuilder = codeBuilder.Replace("**DICTIONARY MAPPING**", DictionaryMapping.ToString());
        codeBuilder = codeBuilder.Replace("**CLASS UPPERCASE WITH AN S**", (DataService.FirstCharToUpper(CurrentViewName) + "s"));
        codeBuilder = codeBuilder.Replace("**CLASS LOWERCASE WITH AN S**", (CurrentViewName.ToLower() + "s"));
        codeBuilder = codeBuilder.Replace("**FIRST FIELD**", columns[0]);

        // ** Write the class to a file

        // Set the file path
        string directoryPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Classes";

        string filePath =  Path.Combine(directoryPath, CurrentViewName + ".cs");

        // Write the class to file
        // Write the class to file
        File.WriteAllText(filePath, codeBuilder.ToString());

        // **********************
        // ** Create the xsd file
        // **********************

        // Load the class and generate the schema
        // Load the class by using its name and get its type

        // Load the class using the contents in codeBuilder.ToString() and get its type
        var ClassType = XsdGenerator.GetTypeFromCode(codeBuilder.ToString(), DataService.FirstCharToUpper(CurrentViewName));

        // Step 1: Generate the schema string
        string schemaString = XsdGenerator.GenerateSchemaForType(ClassType);

        // Step 2: Save the file
        directoryPath = $"{System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)}/PersonalDataWarehouse/Databases/{CurrentDatabaseName}/Reports/Data";

        filePath = Path.Combine(directoryPath, $"{CurrentViewName}Schemas.xsd");
        File.WriteAllText(filePath, schemaString);

        Message = $"{CurrentViewName} saved!";

        // ** Close the popup if visible
        IsSaveViewPopupVisible = false;

        // Reload the dropdown
        ViewList = new List<string>();

        if (Directory.Exists(viewsFolder))
        {
            ViewList = Directory.GetFiles(viewsFolder, "*.view")
                                 .Select(Path.GetFileNameWithoutExtension)
                                 .ToList();
        }

        // Load the view
        await LoadViewAsync(CurrentViewName);
    }

    // Code Execution

    #region RunCode
    private async Task Execute()
    {
        try
        {
            if (CurrentViewName == "")
            {
                // Open a popup to enter the view name
                IsSaveViewPopupVisible = true;
                return;
            }

            //  Save the content before executing
            await OnEditorSaveRequested();

            // Execute the code
            var objResult = await RunDynamicCode(CurrentScript);

            if (objResult != null)
            {
                // Parse objDataParametersResult.data to a list of dictionaries
                var columns = objResult.Select(x => x.ToDictionary(y => y.Key, y => y.Value)).FirstOrDefault();

                objDataParameters = new DataParameters
                    {
                        data = objResult,
                        columns = columns.ToDictionary(x => x.Key, x => Type.GetType("System.String"))
                    };
            }

            // Show the output
            IsNewOutputPopupVisible = true;
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
        }
    }

    public async Task<IEnumerable<IDictionary<string, object>>> RunDynamicCode(string paramCode)
    {
        try
        {
            dynamic script = CSScript.Evaluator.LoadMethod(paramCode);

            var result = await script.ReturnResult();

            return result as IEnumerable<IDictionary<string, object>>;
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
            return null;
        }
    }
    #endregion

    #region AI
    private async Task AIbtn()
    {
        try
        {
            var OPENAI_API_KEY = "";

            if (string.IsNullOrEmpty(OPENAI_API_KEY))
            {
                Message = "Please set the OPENAI_API_KEY in appsettings.json";
                return;
            }

            IsLoading = true;

            IChatClient client = new OpenAIClient(OPENAI_API_KEY).AsChatClient(modelId: "gpt-4o-mini");
            var response = await client.CompleteAsync(AIMessage);

            IsLoading = false;
            ShowAI = false;

            Message = response.Choices[0].Text;
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
        }
    }

    private void OpenAIPopup()
    {
        AIMessage = "";
        ShowAI = true;
    }

    private void CloseAIPopup()
    {
        ShowAI = false;
        Message = "";
    }
    #endregion

    private string SampleCode = @"    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    public async Task<IEnumerable<IDictionary<string, object>>> ReturnResult()
    {
        // Generate random data
        return Enumerable.Range(1, 1).Select(id => new Dictionary<string, object>
        {
            { ""EmployeeId"", ""1234"" },
            { ""FirstName"", ""John"" },
            { ""LastName"", ""Doe"" }
        });
    }";
}