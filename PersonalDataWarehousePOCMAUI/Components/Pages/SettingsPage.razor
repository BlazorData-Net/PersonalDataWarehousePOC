@page "/settingspage"
@using Newtonsoft.Json;
@using PersonalDataWarehouse.AI
@using PersonalDataWarehousePOCMAUI.Services
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject IJSRuntime JSRuntime
<h3>Settings</h3>
<!-- Include 7.css in your project if not already included -->
<link rel="stylesheet" href="https://unpkg.com/7.css">

<RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Database Management">
            <DatabaseManagementPage />
        </RadzenTabsItem>
        <RadzenTabsItem Text="AI">
            <div class="grid gap-md p-sm-12">
                <div class="col-8 col-sm-4">
                    <div class="stack gap-md">

                        <!-- OpenAI Service Type -->
                        <div class="form-group">
                            <label for="aiType"><b>OpenAI Service Type:</b></label>
                            <select id="aiType"
                            class="form-control"
                            style="width:300px"
                            @bind="AIType">
                                @foreach (var type in colAITypes)
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                        </div>
                        <br />
                        <!-- ApiKey -->
                        <div class="form-group">
                            <label for="apiKey"><b>ApiKey:</b></label>
                            <input id="apiKey"
                            type="password"
                            class="form-control"
                            style="width:450px"
                            @bind="ApiKey"
                            @onkeydown="APIKeyDetection" />
                        </div>
                        <br />
                        <!-- Conditional Fields Based on AIType -->
                        @if (AIType == "OpenAI")
                        {
                            <!-- Default AI Model -->
                            <div class="form-group">
                                <label for="aiModel"><b>Default AI Model:</b></label>
                                <select id="aiModel"
                                class="form-control"
                                style="width:300px"
                                @bind="AIModel">
                                    @foreach (var model in colModels)
                                    {
                                        <option value="@model">@model</option>
                                    }
                                </select>
                            </div>
                            <br />
                        }
                        else if (AIType == "Azure OpenAI")
                        {
                            <!-- Azure OpenAI Model Deployment Name -->
                            <div class="form-group">
                                <label for="azureModel"><b>Azure OpenAI Model Deployment Name:</b></label>
                                <input id="azureModel"
                                type="text"
                                class="form-control"
                                style="width:450px"
                                @bind="AIModel" />
                            </div>
                            <br />

                            <!-- Azure OpenAI Endpoint -->
                            <div class="form-group">
                                <label for="endpoint"><b>Azure OpenAI Endpoint:</b></label>
                                <input id="endpoint"
                                type="text"
                                class="form-control"
                                style="width:450px"
                                @bind="Endpoint" />
                            </div>
                            <br />
                        }
                        <br />
                        <!-- Conditional Buttons Based on Settings -->
                        @if (!IsSettingsEntered)
                        {
                            @if (AIType == "OpenAI")
                            {
                                <button type="button"
                                @onclick="GetAPIKey"
                                style="margin-bottom: 10px; width: 500px">
                                    An OpenAI API Key is required (Click here to get one)
                                </button>
                            }
                            else if (AIType == "Azure OpenAI")
                            {
                                <button type="button"
                                @onclick="GetAzureAPIKey"
                                style="margin-bottom: 10px; width: 500px">
                                    An Azure OpenAI API Key is required (Click here to get one)
                                </button>
                            }
                        }
                        else
                        {
                            <button type="button"
                            @onclick="SettingsSave"
                            style="margin-bottom: 10px; width: 500px">
                                Save
                            </button>
                        }

                    </div>
                </div>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Logs">
            <Logs />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Parameter] public EventCallback SettingsChanged { get; set; }
    OrchestratorMethods OrchestratorMethods;

    string DefaultAIModel = "gpt-4o";

    string ApiKey = "";
    string AIModel = "gpt-4o";
    string AIType = "OpenAI";
    string Endpoint = "";
    string AIEmbeddingModel = "";
    string ApiVersion = "";

    List<string> colAITypes = new List<string>()
                {
                   "OpenAI","Azure OpenAI"
                };

    List<string> colModels = new List<string>()
                {
                   "gpt-4o","gpt-4o-mini","gpt-4-turbo"
                };

    bool IsSettingsEntered = false;

    protected override async Task OnInitializedAsync()
    {
        SettingsService.LoadSettings();

        OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

        // Get APIKey from secure settings
        ApiKey = await SecureStorage.Default.GetAsync("AIApiKey") ?? ""; 

        Endpoint = SettingsService.Settings.ApplicationSettings.Endpoint;
        ApiVersion = SettingsService.Settings.ApplicationSettings.ApiVersion;
        AIEmbeddingModel = SettingsService.Settings.ApplicationSettings.AIEmbeddingModel;
        AIModel = SettingsService.Settings.ApplicationSettings.AIModel;
        AIType = SettingsService.Settings.ApplicationSettings.AIType;

        if (ApiKey.Length > 1)
        {
            IsSettingsEntered = true;
        }
        else
        {
            IsSettingsEntered = false;
        }
    }

    private async Task GetAPIKey()
    {
        // Open a new window to the OpenAI API Key page
        await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys");
    }

    private async Task GetAzureAPIKey()
    {
        // Open a new window to the Azure OpenAI API Key page
        await JSRuntime.InvokeVoidAsync("open", "https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/create-resource?pivots=web-portal");
    }

    private void APIKeyDetection(KeyboardEventArgs args)
    {
        IsSettingsEntered = true;
    }

    private async Task SettingsSave()
    {
        try
        {
            if ((AIType == "OpenAI") && (!ApiKey.StartsWith("sk-")))
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Invalid API Key - must start with: sk-",
                        Duration = 4000
                    });

                return;
            }

            if (ApiKey.Length < 5)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "API Key is required",
                        Duration = 4000
                    });

                return;
            }            

            // Save API Key
            await SecureStorage.Default.SetAsync("AIApiKey", ApiKey);

            // Update Settings
            SettingsService settingsService = new SettingsService();

            SettingsService.ApplicationSettings applicationSettings = settingsService.Settings.ApplicationSettings;

            applicationSettings.Endpoint = Endpoint;
            applicationSettings.AIModel = AIModel;
            applicationSettings.AIType = AIType;
            applicationSettings.AIEmbeddingModel = AIEmbeddingModel;

            await settingsService.UpdateSettingsAsync(applicationSettings);

            // Test API Key
            var result = await OrchestratorMethods.TestAccess(AIModel, ApiKey, Endpoint, AIEmbeddingModel);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Saved",
                    Duration = 4000
                });

            // Notify parent that settings have changed
            await SettingsChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 8000
                });
        }
    }

    private void ChangeAIType(dynamic paramAIType)
    {
        // Set the default model based on the AI Type
        if (paramAIType == "OpenAI")
        {
            AIModel = DefaultAIModel;
            Endpoint = "https://api.openai.com";
        }
    }
}