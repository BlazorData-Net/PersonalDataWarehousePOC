@page "/settingspage"
@using Newtonsoft.Json;
@using PersonalDataWarehouse.AI
@using PersonalDataWarehousePOCMAUI.Services
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject IJSRuntime JSRuntime
<h3>Settings</h3>
<!-- Include 7.css in your project if not already included -->
<link rel="stylesheet" href="https://unpkg.com/7.css">

<div class="grid gap-md p-sm-12">
    <div class="col-8 col-sm-4">
        <div class="stack gap-md">

            <!-- OpenAI Service Type -->
            <div class="form-group">
                <label for="aiType">OpenAI Service Type:</label>
                <select id="aiType"
                        class="form-control"
                        style="width:300px"
                        @bind="AIType">
                    @foreach (var type in colAITypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
            <br />
            <!-- ApiKey -->
            <div class="form-group">
                <label for="apiKey">ApiKey:</label>
                <input id="apiKey"
                       type="text"
                       class="form-control"
                       style="width:450px"
                       @bind="ApiKey"
                       @onkeydown="APIKeyDetection" />
            </div>
            <br />
            <!-- Conditional Fields Based on AIType -->
            @if (AIType == "OpenAI")
            {
                <!-- Default AI Model -->
                <div class="form-group">
                    <label for="aiModel">Default AI Model:</label>
                    <select id="aiModel"
                            class="form-control"
                            style="width:300px"
                            @bind="AIModel">
                        @foreach (var model in colModels)
                        {
                            <option value="@model">@model</option>
                        }
                    </select>
                </div>
            }
            else if (AIType == "Azure OpenAI")
            {
                <!-- Azure OpenAI Model Deployment Name -->
                <div class="form-group">
                    <label for="azureModel">Azure OpenAI Model Deployment Name:</label>
                    <input id="azureModel"
                           type="text"
                           class="form-control"
                           style="width:450px"
                           @bind="AIModel" />
                </div>

                <!-- Azure OpenAI Embedding Model Deployment Name -->
                <div class="form-group">
                    <label for="azureEmbeddingModel">Azure OpenAI Embedding Model Deployment Name:</label>
                    <input id="azureEmbeddingModel"
                           type="text"
                           class="form-control"
                           style="width:450px"
                           @bind="AIEmbeddingModel" />
                </div>

                <!-- Azure OpenAI Endpoint -->
                <div class="form-group">
                    <label for="endpoint">Azure OpenAI Endpoint:</label>
                    <input id="endpoint"
                           type="text"
                           class="form-control"
                           style="width:450px"
                           @bind="Endpoint" />
                </div>

                <!-- Azure OpenAI API Version -->
                <div class="form-group">
                    <label for="apiVersion">Azure OpenAI API Version:</label>
                    <input id="apiVersion"
                           type="text"
                           class="form-control"
                           style="width:450px"
                           @bind="ApiVersion" />
                </div>
            }
            <br />
            <!-- Conditional Buttons Based on Settings -->
            @if (!IsSettingsEntered)
            {
                @if (AIType == "OpenAI")
                {
                    <button type="button"
                            @onclick="GetAPIKey"
                            style="margin-bottom: 10px; width: 500px">
                        An OpenAI API Key is required (Click here to get one)
                    </button>
                }
                else if (AIType == "Azure OpenAI")
                {
                    <button type="button"
                            @onclick="GetAzureAPIKey"
                            style="margin-bottom: 10px; width: 500px">
                        An Azure OpenAI API Key is required (Click here to get one)
                    </button>
                }
            }
            else
            {
                <br />
                <button type="button"
                        @onclick="SettingsSave"
                        style="margin-bottom: 10px; width: 500px">
                    Save
                </button>
            }

        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback SettingsChanged { get; set; }
    OrchestratorMethods OrchestratorMethods;
    Variant variant = Variant.Outlined;

    string DefaultAIModel = "gpt-4o";

    string Organization = "";
    string ApiKey = "";
    string AIModel = "gpt-4o";
    string AIType = "OpenAI";
    string Endpoint = "";
    string AIEmbeddingModel = "";
    string ApiVersion = "";

    List<string> colAITypes = new List<string>()
                {
                   "OpenAI","Azure OpenAI"
                };

    List<string> colModels = new List<string>()
                {
                   "gpt-4o","gpt-4o-mini","gpt-4-turbo"
                };

    bool IsSettingsEntered = false;

    protected override void OnInitialized()
    {
        SettingsService.LoadSettings();

        OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

        Organization = SettingsService.Organization;
        ApiKey = SettingsService.ApiKey;
        AIModel = SettingsService.AIModel;
        AIType = SettingsService.AIType;
        Endpoint = SettingsService.Endpoint;
        ApiVersion = SettingsService.ApiVersion;
        AIEmbeddingModel = SettingsService.AIEmbeddingModel;

        if (ApiKey.Length > 1)
        {
            IsSettingsEntered = true;
        }
        else
        {
            IsSettingsEntered = false;
        }
    }

    private async Task GetAPIKey()
    {
        // Open a new window to the OpenAI API Key page
        await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys");
    }

    private async Task GetAzureAPIKey()
    {
        // Open a new window to the Azure OpenAI API Key page
        await JSRuntime.InvokeVoidAsync("open", "https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/create-resource?pivots=web-portal");
    }

    private void APIKeyDetection(KeyboardEventArgs args)
    {
        IsSettingsEntered = true;
    }

    private async Task SettingsSave()
    {
        try
        {
            if ((AIType == "OpenAI") && (!ApiKey.StartsWith("sk-")))
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Invalid API Key - must start with: sk-",
                        Duration = 4000
                    });

                return;
            }

            // Update Settings
            await SettingsService.SaveSettings(Organization, ApiKey, AIModel, AIType, Endpoint, ApiVersion, AIEmbeddingModel);

            // Test API Key
            var result = await OrchestratorMethods.TestAccess(AIModel);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Saved",
                    Duration = 4000
                });

            // Notify parent that settings have changed
            await SettingsChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 8000
                });
        }
    }

    private void ChangeAIType(dynamic paramAIType)
    {
        // Set the default model based on the AI Type
        if (paramAIType == "OpenAI")
        {
            AIModel = DefaultAIModel;
        }
    }
}