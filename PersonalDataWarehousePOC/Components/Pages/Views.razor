@page "/views"
@using Blazor.Monaco
@using System.Text.Json
@using System.Linq.Dynamic.Core

<PageTitle>Views</PageTitle>

<h4>Views</h4>

<button @onclick="OnEditorSaveRequested">Save</button>
&nbsp;
<button @onclick="Execute">Execute</button>
@if (ContentChanged)
{
    <span style="color:red">&nbsp;&nbsp;<b>Editing...</b></span>
}
<br />
<br />
<MonacoEditor ElementId="script-one"
@ref="_monacoEditorInstance"
Language="Language.CSharp"
OnContentChanged="OnEditorContentChanged"
OnSaveRequested="OnEditorSaveRequested"
ScriptContent="@MyScript"
EditorOptions="MonacoOptions"
Style="width: 90%; height:400px;" />

<!-- POPUPS -->
@if (IsNewOutputPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog" style="max-width: 90%; margin-top: 5%;">
            <div class="modal-content">
                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Output</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseOutputTablePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">

                        <RadzenDataGrid @bind-Value=@selectedItems
                        Data="@data" TItem="IDictionary<string, object>"
                        ColumnWidth="200px"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true">
                            <Columns>
                                @foreach (var column in columns)
                                {
                                    <RadzenDataGridColumn @key=@column.Key
                                    Title="@column.Key"
                                    Type="column.Value"
                                    Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                                        <Template>
                                            @context[@column.Key]
                                        </Template>
                                    </RadzenDataGridColumn>
                                }
                            </Columns>
                        </RadzenDataGrid>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool ContentChanged { get; set; }
    private string MyScript { get; set; } = string.Empty;
    private MonacoEditor _monacoEditorInstance = null!;
    private EditorOptions MonacoOptions = new EditorOptions();

    private bool IsNewOutputPopupVisible { get; set; } = false;

    protected override void OnInitialized()
    {
        MonacoOptions.ReadOnly = false;
        MonacoOptions.WordWrap = WordWrap.On;
        MonacoOptions.Theme = Blazor.Monaco.Theme.Vs;
        MonacoOptions.LineNumbers = LineNumbers.On;        
    }

    private void OnEditorContentChanged(bool hasChanged)
    {
        ContentChanged = hasChanged;
    }

    private async Task OnEditorSaveRequested()
    {
        MyScript = await _monacoEditorInstance.GetEditorContent(resetChangedOnRead: true);
        ContentChanged = false;
        StateHasChanged();
    }

    private void CloseOutputTablePopup()
    {
        IsNewOutputPopupVisible = false;
    }

    private async Task Execute()
    {
        await OnEditorSaveRequested();
        CreateData();
        IsNewOutputPopupVisible = true;
    }

    // Data

    IList<IDictionary<string, object>> selectedItems;

    public IEnumerable<IDictionary<string, object>> data { get; set; }

    public IDictionary<string, Type> columns { get; set; }

    public enum EnumTest
    {
        EnumValue1,
        EnumValue2
    }

    private void CreateData()
    {
        columns = new Dictionary<string, Type>()
        {
            { "EmployeeID", typeof(int?) },
            { "MyColumn", typeof(EnumTest?) },
            { "FirstName", typeof(string) },
            { "LastName", typeof(string) },
            { "HireDate", typeof(DateTime?) },
            { "DateOnly", typeof(DateOnly?) },
            { "TimeOnly", typeof(TimeOnly?) },
            { "UID", typeof(Guid?) },
        };

        foreach (var i in Enumerable.Range(0, 50))
        {
            columns.Add($"Column{i}", typeof(string));
        }

        data = Enumerable.Range(0, 100).Select(i =>
        {
            var row = new Dictionary<string, object>();

            foreach (var column in columns)
            {
                row.Add(
                    column.Key,
                    column.Value == typeof(EnumTest?)
                        ? i == 0 ? null : (i % 2 == 0 ? EnumTest.EnumValue1 : EnumTest.EnumValue2)
                        : column.Value == typeof(int?)
                            ? i == 0 ? null : i
                            : column.Value == typeof(DateTime?)
                                ? i == 0 ? null : DateTime.Now.AddMonths(i)
                                : column.Value == typeof(Guid?)
                                ? i == 0 ? null : Guid.NewGuid()
                                : column.Value == typeof(DateOnly?)
                                ? i == 0 ? null : DateOnly.FromDateTime(DateTime.Now.AddMonths(i))
                                : column.Value == typeof(TimeOnly?)
                                ? i == 0 ? null : TimeOnly.FromDateTime(DateTime.Now.AddMonths(i))
                                : $"{column.Key}{i}"
                );
            }

            return row;
        });
    }
}