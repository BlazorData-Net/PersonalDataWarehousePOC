@page "/views"
@using Blazor.Monaco
@using System.Text.Json
@using System.Linq.Dynamic.Core
@using CSScriptLib
@using System.Reflection

<PageTitle>Views</PageTitle>

<h4>Views</h4>

<button @onclick="OnEditorSaveRequested">Save</button>
&nbsp;
<button @onclick="Execute">Execute</button>
@if (ContentChanged)
{
    <span style="color:red">&nbsp;&nbsp;<b>Editing...</b></span>
}
<br />
<br />
<MonacoEditor ElementId="script-one"
              @ref="_monacoEditorInstance"
              Language="Language.CSharp"
              OnContentChanged="OnEditorContentChanged"
              OnSaveRequested="OnEditorSaveRequested"
              ScriptContent="@CurrentScript"
              EditorOptions="MonacoOptions"
              Style="width: 90%; height:400px;" />

<!-- POPUPS -->
@if (IsNewOutputPopupVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog" style="max-width: 90%; margin-top: 5%;">
            <div class="modal-content">
                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Output</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseOutputTablePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">

                        <RadzenDataGrid Data="@objDataParameters.data"
                                        ColumnWidth="200px"
                                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                        FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true">
                            <Columns>
                                @foreach (var column in objDataParameters.columns)
                                {
                                    <RadzenDataGridColumn @key=@column.Key
                                                          Title="@column.Key"
                                                          Type="column.Value"
                                                          Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                                        <Template>
                                            @context[@column.Key]
                                        </Template>
                                    </RadzenDataGridColumn>
                                }
                            </Columns>
                        </RadzenDataGrid>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (Message != "")
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="window glass active">
                    <div class="title-bar">
                        <div class="title-bar-text">Alert!</div>
                        <div class="title-bar-controls">
                            <button aria-label="Close" @onclick="CloseMessagePopup"></button>
                        </div>
                    </div>
                    <div class="window-body has-space">
                        <div class="has-scrollbar" style="width: 300px; height: 100px; overflow: auto">
                            @Message
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool ContentChanged { get; set; }
    private string CurrentScript { get; set; } = string.Empty;
    private MonacoEditor _monacoEditorInstance = null!;
    private EditorOptions MonacoOptions = new EditorOptions();

    private DataParameters objDataParameters = new DataParameters();

    private bool IsNewOutputPopupVisible { get; set; } = false;

    string Message = "";

    protected override void OnInitialized()
    {
        objDataParameters = new DataParameters();
        objDataParameters.data = new List<IDictionary<string, object>>();
        objDataParameters.columns = new Dictionary<string, Type>();

        MonacoOptions.ReadOnly = false;
        MonacoOptions.WordWrap = WordWrap.On;
        MonacoOptions.Theme = Blazor.Monaco.Theme.Vs;
        MonacoOptions.LineNumbers = LineNumbers.On;

        SetDefaultScript();
    }

    // Monaco Editor

    private void OnEditorContentChanged(bool hasChanged)
    {
        ContentChanged = hasChanged;
    }

    private async Task OnEditorSaveRequested()
    {
        CurrentScript = await _monacoEditorInstance.GetEditorContent(resetChangedOnRead: true);
        ContentChanged = false;
        StateHasChanged();
    }

    // Default Script

    private void SetDefaultScript()
    {
        // Are there in classes in the Data namespace?
        string targetNamespace = "Data";

        // Load the current assembly (replace with a specific assembly if needed)
        Assembly assembly = Assembly.GetExecutingAssembly();

        // Get all types in the assembly that belong to the specified namespace
        var typesInNamespace = assembly.GetTypes()
                                       .Where(t => t.Namespace == targetNamespace && t.IsClass);

        // If no classes are found, set the default script
        if (typesInNamespace.Count() == 0)
        {
            CurrentScript = SampleCode;
            return;
        }

        // If classes are found, use the first one
        string SelectedTable = typesInNamespace.First().Name;

        CurrentScript = $"using System;\n";
        CurrentScript += $"using System.Collections.Generic;\n";
        CurrentScript += $"using System.Linq;\n";
        CurrentScript += $"using System.Threading.Tasks;\n";
        CurrentScript += $"\n";
        CurrentScript += $"public async Task<IEnumerable<IDictionary<string, object>>> ReturnResult()\n";
        CurrentScript += "{\n";
        CurrentScript += $"    Dataloader objDataloader = new Dataloader();\n";
        CurrentScript += $@"    var col{SelectedTable} = await objDataloader.LoadParquet(""{SelectedTable}"");";
        CurrentScript += $"\n";
        CurrentScript += $"    return col{SelectedTable}.Select(row => row.ToDictionary()).Take(100).ToList();";
        CurrentScript += "\n";
        CurrentScript += "}\n";
    }

    // Popup Message

    private void CloseOutputTablePopup()
    {
        IsNewOutputPopupVisible = false;
    }

    private void CloseMessagePopup()
    {
        Message = "";
    }

    // Code Execution

    #region RunCode
    private async Task Execute()
    {
        //  Save the content before executing
        await OnEditorSaveRequested();

        // Execute the code
        var objResult = await RunDynamicCode(CurrentScript);

        if (objResult != null)
        {
            // Parse objDataParametersResult.data to a list of dictionaries
            var columns = objResult.Select(x => x.ToDictionary(y => y.Key, y => y.Value)).FirstOrDefault();

            objDataParameters = new DataParameters
                {
                    data = objResult,
                    columns = columns.ToDictionary(x => x.Key, x => Type.GetType("System.String"))
                };
        }

        // Show the output
        IsNewOutputPopupVisible = true;
    }

    public async Task<IEnumerable<IDictionary<string, object>>> RunDynamicCode(string paramCode)
    {
        try
        {
            dynamic script = CSScript.Evaluator.LoadMethod(paramCode);

            var result = await script.ReturnResult();

            return result as IEnumerable<IDictionary<string, object>>;
        }
        catch (Exception ex)
        {
            Message = ex.GetBaseException().Message;
            return null;
        }
    }
    #endregion

    // SampleCode

    private string SampleCode = @"

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public IEnumerable<IDictionary<string, object>> data { get; set; }
static Random random = new Random();

public async Task<IEnumerable<IDictionary<string, object>>> ReturnResult()
{
    // Generate random data
    return Enumerable.Range(1, 100).Select(id => new Dictionary<string, object>
    {
        { ""EmployeeId"", id },
        { ""FirstName"", GenerateRandomFirstName() },
        { ""LastName"", GenerateRandomLastName() },
        { ""Birthdate"", GenerateRandomBirthdate() },
        { ""Position"", GenerateRandomPosition() }
    });
}

static string GenerateRandomFirstName()
{
    var firstNames = new[] { ""John"", ""Jane"", ""Michael"", ""Emily"", ""Chris"", ""Anna"", ""Robert"", ""Laura"" };
    return firstNames[random.Next(firstNames.Length)];
}

static string GenerateRandomLastName()
{
    var lastNames = new[] { ""Smith"", ""Johnson"", ""Brown"", ""Taylor"", ""Anderson"", ""Thomas"", ""Jackson"", ""White"" };
    return lastNames[random.Next(lastNames.Length)];
}

static DateTime GenerateRandomBirthdate()
{
    var startDate = new DateTime(1950, 1, 1);
    var range = (DateTime.Today - startDate).Days;
    return startDate.AddDays(random.Next(range));
}

static string GenerateRandomPosition()
{
    var positions = new[] { ""Developer"", ""Manager"", ""Designer"", ""Analyst"", ""Tester"", ""Support"", ""Admin"" };
    return positions[random.Next(positions.Length)];
}

    ";
}