@page "/tables"
@using BlazorDatasheet
@using BlazorDatasheet.Core.Data
@using System.Data
@using BlazorDatasheet.Core.Formats
@using Parquet;
@using Parquet.Schema
@using PersonalDataWarehousePOC.Services
@inject ExcelService ExcelService

<PageTitle>Tables</PageTitle>

@* <select @onchange="@(async (args) => await LoadTableData(args.Value?.ToString()))">
    <option value="TableOne">Table One</option>
    <option value="TableTwo">Table Two</option>
</select> *@
<br />
<br />
<InputFile OnChange="HandleFileSelected" />
<br />
<br />
@if (IsLoadingSheet)
{
    <div class="spinner-border" role="status"></div>
}
else
{
    <button @onclick="SaveParquetAsync">Save</button>
    <br /><br />
    <Datasheet Sheet="@sheet" />
}

<br />
<br />

@code {
    private Sheet sheet;

    private DataSet dataSet;
    private Stream fileStream;
    private IBrowserFile file;

    List<string> TableColumns = new List<string>();
    DataTable CurrentDataTable = new DataTable();

    string Message = string.Empty;
    string strAIResponse = "";

    bool IsLoadingSheet = true;
    bool IsLoading = false;
    bool ShowLog = false;
    bool CanApplyChanges = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoadingSheet = false;

        // Initialize the sheet
        sheet = new Sheet(10, 10);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IsLoadingSheet = true;
        StateHasChanged();

        var file = e.File;
        using var stream = file.OpenReadStream();
        dataSet = await ExcelService.ReadExcelFileAsync(stream);

        // Load dataSet into DataTable
        if (dataSet != null && dataSet.Tables.Count > 0)
        {
            CurrentDataTable = dataSet.Tables[0];
            await LoadTableData();
        }

        IsLoadingSheet = false;
        StateHasChanged();
    }


    private async Task LoadTableData()
    {
        Message = "";

        // Get a list of the columns from the DataTable
        TableColumns = CurrentDataTable.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToList();

        // Create sheet with the number of columns
        sheet = new Sheet(CurrentDataTable.Rows.Count, TableColumns.Count);

        // Wait 1 second before loading the table data
        // to join the UI thread
        await Task.Delay(1000);

        // Turn off history
        sheet.BatchUpdates();
        sheet.Commands.PauseHistory();

        int i = 0;
        foreach (string objDatabaseColumn in TableColumns)
        {
            sheet.Columns.SetHeadings(i, i, objDatabaseColumn);
            i++;
        }

        int ii = 0;
        foreach (DataRow dataRow in CurrentDataTable.Rows)
        {
            i = 0;
            foreach (string objDatabaseColumn in TableColumns)
            {
                // Set the value of the cell
                sheet.Cells[ii, i].Value = dataRow[i].ToString();

                // Make the first column read only and hidden and an integer
                if (i == 0)
                {
                    sheet.Cells[ii, i].Format = new CellFormat() { IsReadOnly = true };
                    sheet.Cells[ii, i].Type = "int";
                }
                else
                {
                    sheet.Cells[ii, i].Format = new CellFormat() { IsReadOnly = false };
                    sheet.Cells[ii, i].Type = "string";
                }

                i++;
            }

            ii++;
        }

        // Hide the Id column
        sheet.Columns.Hide(0, 0);

        // Turn on history
        sheet.EndBatchUpdates();
        sheet.Commands.ResumeHistory();
    }

    private async Task SaveParquetAsync()
    {
        IsLoading = true;
        StateHasChanged();

        int columnCount = CurrentDataTable.Columns.Count;
        int lastColumnIndex = columnCount - 1;

        // Prepare fields for all columns
        var parquetFields = new List<Field>(columnCount);
        for (int i = 0; i < columnCount; i++)
        {
            string columnName = CurrentDataTable.Columns[i].ColumnName;
            parquetFields.Add(new DataField<string>(columnName));
        }

        ParquetSchema parquetSchema = new ParquetSchema(parquetFields);
        var parquetTable = new Parquet.Rows.Table(parquetSchema);

        foreach (DataRow dataRow in CurrentDataTable.Rows)
        {
            // Initialize the row with a pre-sized string array
            var row = new Parquet.Rows.Row(new string[columnCount]);

            for (int j = 0; j < lastColumnIndex; j++)
            {
                string value = dataRow[j]?.ToString() ?? string.Empty;

                if (!string.IsNullOrEmpty(value))
                {
                    // Using chained Replace calls for clarity and performance
                    value = value.Replace("\r\n", " ")
                                 .Replace("\t", " ")
                                 .Replace("\r", " ")
                                 .Replace("\n", " ")
                                 .Trim();
                }

                row[j] = value;
            }

            parquetTable.Add(row);
        }

        using var ms = new MemoryStream();
        await parquetTable.WriteAsync(ms); // Await for async write
        ms.Position = 0;

        string fileName = "Data/Parquet/ParquetFile.parquet";
        using (var fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write))
        {
            ms.CopyTo(fileStream);
        }

        IsLoading = false;
        StateHasChanged();
    }

}