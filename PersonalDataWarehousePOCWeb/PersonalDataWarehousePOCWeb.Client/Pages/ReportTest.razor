@page "/reporttest"

@using BlazorDatasheet
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.DataStructures.Geometry
@using Microsoft.Reporting.NETCore
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<PageTitle>Home</PageTitle>

@if (isReportGenerated)
{
    <div>
        Page: <span>@CurrentPage</span> / <span id="page_count">0</span> &nbsp;&nbsp;
        <button @onclick="PreviousPage">Previous</button>
        <button @onclick="NextPage">Next</button>
        <button @onclick="ZoomIn">Zoom In</button>
        <button @onclick="ZoomOut">Zoom Out</button>
        <button @onclick="PrintPdf">Print</button>
        <div @ref="pdfContainer" id="pdf-container"
             style="border: 0px solid #ccc; width: 600px; height: 800px;"></div>
    </div>
}
else
{
    <!-- Display text box to obtain report title bound to ReportTitle -->
    <label for="reportTitle">Report Title:</label>
    <input type="text" id="reportTitle" @bind="ReportTitle" />
    <br />
    <br />
    <Datasheet Sheet="sheet" />
    <br />
    <br />
    <button @onclick="PrepareReportAsync">Generate Report</button>
}

@code {
    private ElementReference pdfContainer;

    private bool isReportGenerated = false;
    private int CurrentPage = 1;

    private string ReportTitle = "Invoice 4/2025";

    private Sheet? sheet;

    public class MyReportRequest
    {
        public byte[]? RdlcBytes { get; set; }
        public string? Title { get; set; }
        public List<Dictionary<string, object>>? Rows { get; set; }
    }

    protected override void OnInitialized()
    {
        // Create the datasheet

        sheet = new Sheet(8, 3);
        sheet.Columns.SetHeadings(0, 0, "Description");
        sheet.Columns.SetHeadings(1, 1, "Price");
        sheet.Columns.SetHeadings(2, 2, "Qty");

        // Add some data
        // Get the report items
        var reportItems = GetReportItems();

        // Add the report items to the datasheet
        for (int i = 0; i < reportItems.Length; i++)
        {
            sheet.Cells[i, 0].Value = reportItems[i].Description;
            sheet.Cells[i, 1].Value = reportItems[i].Price;
            sheet.Cells[i, 2].Value = reportItems[i].Qty;
        }
    }

    private ReportItem[] GetReportItems()
    {
        return new[]
        {
            new ReportItem
            {
                Description = "Widget 6000",
                Price = 104.99m,
                Qty = 1
            },
            new ReportItem
            {
                Description = "Gizmo MAX",
                Price = 1.41m,
                Qty = 25
            }
        };
    }

    private async Task PrepareReportAsync()
    {
        // Set the flag to indicate the report is generated
        isReportGenerated = true;

        // Create the report
        using var report = new LocalReport();

        // Define the report parameters
        var parameters = new[] { new ReportParameter("Title", ReportTitle) };

        var assembly = typeof(Program).Assembly;
        // The resource name depends on your project's default namespace + folder structure.
        string resourceName = "BlazorRDLCViewerWebAssembly.Client.Reports.Report.rdlc";

        using Stream? reportStream = assembly.GetManifestResourceStream(resourceName);

        // Check that reportStream is not null
        if (reportStream == null)
        {
            // Throw an exception
            throw new Exception("Report.rdlc not found");
        }

        // Get all the values from the sheet
        var items = new List<ReportItem>();

        // Iterate through the rows in the sheet
        for (int i = 0; i < sheet?.NumRows; i++)
        {
            // Create a new report item
            var item = new ReportItem
                {
                    Description = sheet.Cells[i, 0].Value?.ToString() ?? string.Empty,
                    Price =
                                decimal.TryParse(
                                    sheet.Cells[i, 1].Value?.ToString(), out var price) ? price : 0m,
                    Qty = int.TryParse(
                                    sheet.Cells[i, 2].Value?.ToString(), out var qty) ? qty : 0
                };

            // Only add items with a description
            if (!string.IsNullOrWhiteSpace(item.Description))
            {
                // Add the item to the list
                items.Add(item);
            }
        }

        // Convert the list of items to a list of dictionaries
        var ItemsAsDict = items.Select(item => new Dictionary<string, object>
            {
                { "Description", item.Description ?? "" },
                { "Price", item.Price },
                { "Qty", item.Qty },
                { "Total", item.Price * item.Qty }
            }).ToList();

        // Convert the RDLC stream to a byte array
        using var ms = new MemoryStream();
        await reportStream.CopyToAsync(ms);
        byte[] rdlcBytes = ms.ToArray();

        // 2. Build the request payload
        var requestPayload = new MyReportRequest
            {
                RdlcBytes = rdlcBytes,
                Title = ReportTitle,         // parameter for the RDLC
                Rows = ItemsAsDict          // our list of dictionaries
            };

        // 3. POST to the server endpoint
        HttpResponseMessage response = await Http.PostAsJsonAsync(
            "Reports/GenerateReport",
            requestPayload
        );

        if (response.IsSuccessStatusCode)
        {
            // 5. Read the PDF bytes from the response
            var pdfBytes = await response.Content.ReadAsByteArrayAsync();

            // Convert the PDF bytes to a base64 string
            var pdfBase64 = Convert.ToBase64String(pdfBytes);

            // Call the JavaScript function with the element reference and the PDF data
            await jsRuntime.InvokeVoidAsync("blazorPdfViewer.renderPdf", pdfContainer, pdfBase64);
        }
        else
        {
            // Handle error
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception($"Failed to generate report: {errorMessage}");
        }
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await jsRuntime.InvokeVoidAsync("blazorPdfViewer.previousPage", pdfContainer);
        }
    }

    private async Task NextPage()
    {
        CurrentPage++;
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.nextPage", pdfContainer);
    }

    private async Task ZoomIn()
    {
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.zoomIn", pdfContainer);
    }

    private async Task ZoomOut()
    {
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.zoomOut", pdfContainer);
    }

    private async Task PrintPdf()
    {
        await jsRuntime.InvokeVoidAsync("blazorPdfViewer.printPdf", pdfContainer);
    }
}